//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was automatically generated by ASCoDT.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package grs { 
  interface Simulator{
   	 setup();
   	 start();
   }
   
   interface n3inp{
  	n3inp_transferCAI(in string AIKEY[],in string AICONT[]);
  	n3inp_transferCADIMN(in int INM03);
  	// USE CANW,   ONLY: NOBJ, ANAMO
  	n3inp_transferCANW(in int NOBJ,in string ANAMO[]); 
  	// USE CCC,    ONLY: CARD, IOIN, IOPRI
  	n3inp_transferCCC(in string CARD,in int IOIN,in int IOPRI);
  	// USE CDGE,   ONLY: ZBI
  	n3inp_transferCDGE(in double ZBI[]);
  	// USE CDNW,   ONLY: IILO, IIRO
  	n3inp_transferCDNW(in int IILO[],in int IIRO[]);
  	// USE CHCD,   ONLY: NHOBJ, ACOMP0, ANAMH, AOLH, AORH, FPROD
  	n3inp_transferCHCD(in int NHOBJ,in string ACOMP0[], in string ANAMH[], in string AOLH[],in string AORH[],in double FPROD[]);
  	// USE CHCP,   ONLY: NRODS
  	n3inp_transferCHCP(in int NRODS,in int IHVMAX);
  	//USE CRCI,   ONLY: IQF10, AROD
  	n3inp_transferCRCI(in int IQF10[],in string AROD[]);
  	// invoke the function
  	n3inp_invoke();
  	
  	
     
  }
  
  interface n3inte{
	//USE CCA,    ONLY: L3DNK,DT
	n3inte_transferCCA(in int L3DNK,in double DT, in double T);
	//USE CCAC,   ONLY: TFFKT, TFFKT0
    n3inte_transferCCAC(in double TFFKT,in double TFFKT0,in double t0trns);
    //USE CCC,    ONLY: KEYOUT, KEYA1
    n3inte_transferCCC(in int KEYA1,in int KEYE,in int KEYOUT);
    //USE CGCO,   ONLY: TE
    n3inte_transferCGCO(in double TE);
    //USE CHCD,   ONLY: NKHCO
    n3inte_transferCHCD(in int NKHCO[]);
    //USE CHCO,   ONLY: HC
    n3inte_transferCHCO(in double HC[],in double HCTIME);
    //USE CHCP,   ONLY: IAHO, LHCU, LHLENG, POWERN
    n3inte_transferCHCP(in int IAHO[],in int LHCU,in int LHLENG,in double POWERN[],in int NRODS);
    //USE CNI ,   ONLY: NKSGMX, NNRODK
    n3inte_transferCNI(in int NKSGMX,in int NNRODK);
    //USE CNK,    ONLY: INITIA
    n3inte_transferCNK(in int INITIA);
    //USE CNR ,   ONLY: QNKI0
    n3inte_transferCNR(in double QNKI0[]);
    n3inte_transferCRCI(in double qrod0 []);
 
    //INVOKE  ITERNB,LINIK,QNKI 
    n3inte_invoke(inout int ITERNB,in bool LINIK,inout double QNKI []);
     
    n3inte_transferResults(inout double POWERN[],inout double QNKI0[],inout int INITIA);
  }
  
  interface n3rest{
	//USE CCA,    ONLY: L3DNK
	n3rest_transferCCA(in int L3DNK);
    //USE CNK,   ONLY: INITIA, QD
    n3rest_transferCNK(in int INITIA, in double QD[]);
    //USE CNR,   ONLY: QNKI0I 
    n3rest_transferCNR(in double QNKI0I[]);
    //USE CNI,   ONLY: NKSGMX
    n3rest_transferCNI(in int NKSGMX);
    //INVOKE  IDIR, IFORM, IUN
    n3rest_invoke(in int IDIR,in int IFORM,in int IUN);
     
    n3rest_transferResults(inout double QNKI0I[]);
  }
  
  interface n3set{
  	//USE CCC,  ONLY: KEYA1
  	n3set_transferCCC(in int KEYA1);
    //USE CDGE, ONLY: VOLI, ZTI, ZBI
    n3set_transferCDGE(in double VOLI[],in double ZTI[],in double ZBI[]);
    //USE CDML, ONLY: IMLK, IML
    n3set_transferCDML(in int IMLK[], in int IML[]);
    //USE CDNW, ONLY: IILO, IIRO
    n3set_transferCDNW(in int IILO[],in int IIRO[]);
    //USE CDPR, ONLY: TFHT, TL
    n3set_transferCDPR(in double TFHT[],in double TL[]);
    //USE CDQ,  ONLY: QI
    n3set_transferCDQ(in double QI[]);
    //USE CDSS, ONLY: NSSITE
    n3set_transferCDSS(in int NSSITE);
    //USE CDTF, ONLY: XQM, AV, ROF, IKS
    n3set_transferCDTF(in double XQM[], in double AV[], in double ROF[], in int IKS);
    //USE CGCO, ONLY: LSGIMP, YNAME
    n3set_transferCGCO(in int LSGIMP, in string YNAME[]);
    //USE CHCD, ONLY: NKHCO, S0H
    n3set_transferCHCD(in int NKHCO[],in double S0H[]);
    //USE CHCP, ONLY: IHV, LAYAL1, LHLENG, LHCU, NRODS, IAHO, IOUT,
    //&                *POWERN
    n3set_transferCHCP(in int IHV, in int LAYAL1,in int LHCU,in int LHLENG, in double POWERN[],in int NRODS,in int IAHO[],in int IOUT); 
    
    //USE CHCO, ONLY: L7IHV, L2RODS, LIHROD, HC
    n3set_transferCHCO(in int L7IHV,in int L2RODS,in int LIHROD);
    n3set_transferCHCOArrays(in double HC[]);
    //USE CHRD, ONLY: LFLUID
    n3set_transferCHRD(in int LFLUID[]);
    //USE CKBO, ONLY: LBORON, CBOR, XBOR
    n3set_transferCKBO(in bool LBORON,in double CBOR[],in double XBOR[]);
    //USE CNI,  ONLY: NLAYSK, INLAYS, ISDK
    n3set_transferCNI(in int NLAYSK[], in int INLAYS,in int ISDK);
    
    n3set_invoke(in int NSEGS[],in int IZONE[],in int NOLAYS[],in double SV[],in double TT[],in int IQF[],in int ISEG[],in int ISD);
    
    n3set_transferResults(inout double XBOR[],inout int NLAYSK[],inout int INLAYS,inout int ISDK);
  }
  @target = reverse_fortran_remote_socket
  class Athlet implements-all grs.Simulator 
  	uses de.tum.logging.Log as log,
  	uses grs.n3inp as n3inp,
  	uses grs.n3set as n3set,
  	uses grs.n3rest as n3rest,
  	uses grs.n3inte as n3inte
  {
  }
  

}
