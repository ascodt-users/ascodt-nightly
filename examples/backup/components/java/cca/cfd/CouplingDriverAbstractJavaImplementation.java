//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public abstract class CouplingDriverAbstractJavaImplementation extends SocketComponent implements CouplingDriver{
  protected de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab _appTab;
  protected String   _instanceName;
  protected String _projectLocation;
  public CouplingDriverAbstractJavaImplementation( String instanceName ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    _instanceName = instanceName;
    _appTab = new de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab("cca.cfd.CouplingDriver",this, de.tum.ascodt.plugin.ui.views.AppsViewContainer.ID);
    _appTab.setVisible(true);
    _appTab.addListener(this);
    
    
  }
  
  public de.tum.ascodt.repository.Target getTarget() {
     return de.tum.ascodt.repository.Target.createCxxRemoteSocketTarget();
  }
  
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
     return de.tum.ascodt.repository.TargetParameters.createRemoteSocketParameters(
          _appTab.getHost(),
          _appTab.getPort()
          );
  }

  public long getReference(){
    return 0;
  }  
  
  public void setReference(long ref){
   
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

  public void setProjectLocation(String location){
     _projectLocation = location;
     _appTab.setProjectLocation(location);
     if(_appTab.hasApplicationSettings())
          _appTab.execute();
  }
 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
    
  }
  
 
  public void destroy()  {
          try{
               if(isConnected())
                    sendIntData(1);
          }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
               de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
          }
          super.close();
          _appTab.removeListener(this);
          _appTab.setVisible(false);
          _appTab.dispose();
    
  }
  
  public boolean isValid() {
     return true;
  }


  public boolean hasGUI() {
    // @todo Insert your code here
    return false;
  }
  
  
  public void openGUI() {
    // @todo Insert your code here
  }
  
  
  public void closeGUI() {
    // @todo Insert your code here
  }
  
  @Override
  public String getInstanceName() {
    return _instanceName;
  }

  @Override
  public void setInstanceName(String instanceName) {
    _instanceName=instanceName;
  }
  
  public void createInstance(){
     
  }
 
  public void destroyInstance(){
  }
 
  

  public void go(final String configFile) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=5;
         sendIntData(methodId);
         sendStringData(configFile);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }

  public void goParallel(final String configFile) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=5+1;
         sendIntData(methodId);
         sendStringData(configFile);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }
    

  /**
   * Uses port
   */
  protected cca.cfd.LBSolverSocketDispatcher _lb = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public cca.cfd.LBSolver createPortForlb(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    cca.cfd.LBSolverSocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative
    ) {
      result = new cca.cfd.LBSolverSocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket
    ){
          result = new cca.cfd.LBSolverSocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForlb(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForlb(cca.cfd.LBSolverSocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=20;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     ref=readLongData();
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectlb(final cca.cfd.LBSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_lb==null){
       
        _lb = new cca.cfd.LBSolverSocketDispatcher();
        _appTab.addListener(_lb);
        long dispRef = connectClientDispatcherlb(_lb.getHost(),_lb.getPort());
        _lb.setReference(dispRef);
     }
     _lb.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherlb(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=21;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _lb.open();
     ref=readLongData();
     
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectlb(final cca.cfd.LBSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_lb!=null&&_lb.isConnected()){
               assert(_lb!=null );
               _appTab.removeListener(( cca.cfd.LBSolverSocketPort)port);
               _lb.disconnect(port);
               if(!_lb.isConnected()){
                 _appTab.removeListener(_lb);
                 disconnectDispatcherlb();
                 _lb.close();
                 _lb = null;
               }
    }
  }
  
  public void disconnectDispatcherlb() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=22;
     sendIntData(methodId);
     
  }
  
  

  /**
   * Uses port
   */
  protected cca.cfd.LB2NSSocketDispatcher _lb2ns = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public cca.cfd.LB2NS createPortForlb2ns(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    cca.cfd.LB2NSSocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative
    ) {
      result = new cca.cfd.LB2NSSocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket
    ){
          result = new cca.cfd.LB2NSSocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForlb2ns(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForlb2ns(cca.cfd.LB2NSSocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=7;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     ref=readLongData();
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectlb2ns(final cca.cfd.LB2NS  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_lb2ns==null){
       
        _lb2ns = new cca.cfd.LB2NSSocketDispatcher();
        _appTab.addListener(_lb2ns);
        long dispRef = connectClientDispatcherlb2ns(_lb2ns.getHost(),_lb2ns.getPort());
        _lb2ns.setReference(dispRef);
     }
     _lb2ns.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherlb2ns(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=8;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _lb2ns.open();
     ref=readLongData();
     
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectlb2ns(final cca.cfd.LB2NS  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_lb2ns!=null&&_lb2ns.isConnected()){
               assert(_lb2ns!=null );
               _appTab.removeListener(( cca.cfd.LB2NSSocketPort)port);
               _lb2ns.disconnect(port);
               if(!_lb2ns.isConnected()){
                 _appTab.removeListener(_lb2ns);
                 disconnectDispatcherlb2ns();
                 _lb2ns.close();
                 _lb2ns = null;
               }
    }
  }
  
  public void disconnectDispatcherlb2ns() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=9;
     sendIntData(methodId);
     
  }
  
  

  /**
   * Uses port
   */
  protected cca.cfd.NS2LBSocketDispatcher _ns2lb = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public cca.cfd.NS2LB createPortForns2lb(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    cca.cfd.NS2LBSocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative
    ) {
      result = new cca.cfd.NS2LBSocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket
    ){
          result = new cca.cfd.NS2LBSocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForns2lb(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForns2lb(cca.cfd.NS2LBSocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=51;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     ref=readLongData();
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectns2lb(final cca.cfd.NS2LB  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_ns2lb==null){
       
        _ns2lb = new cca.cfd.NS2LBSocketDispatcher();
        _appTab.addListener(_ns2lb);
        long dispRef = connectClientDispatcherns2lb(_ns2lb.getHost(),_ns2lb.getPort());
        _ns2lb.setReference(dispRef);
     }
     _ns2lb.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherns2lb(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=52;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _ns2lb.open();
     ref=readLongData();
     
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectns2lb(final cca.cfd.NS2LB  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_ns2lb!=null&&_ns2lb.isConnected()){
               assert(_ns2lb!=null );
               _appTab.removeListener(( cca.cfd.NS2LBSocketPort)port);
               _ns2lb.disconnect(port);
               if(!_ns2lb.isConnected()){
                 _appTab.removeListener(_ns2lb);
                 disconnectDispatcherns2lb();
                 _ns2lb.close();
                 _ns2lb = null;
               }
    }
  }
  
  public void disconnectDispatcherns2lb() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=53;
     sendIntData(methodId);
     
  }
  
  

  /**
   * Uses port
   */
  protected cca.cfd.NSSolverSocketDispatcher _ns = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public cca.cfd.NSSolver createPortForns(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    cca.cfd.NSSolverSocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative
    ) {
      result = new cca.cfd.NSSolverSocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket
    ){
          result = new cca.cfd.NSSolverSocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForns(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForns(cca.cfd.NSSolverSocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=66;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     ref=readLongData();
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectns(final cca.cfd.NSSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_ns==null){
       
        _ns = new cca.cfd.NSSolverSocketDispatcher();
        _appTab.addListener(_ns);
        long dispRef = connectClientDispatcherns(_ns.getHost(),_ns.getPort());
        _ns.setReference(dispRef);
     }
     _ns.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherns(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=67;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _ns.open();
     ref=readLongData();
     
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectns(final cca.cfd.NSSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_ns!=null&&_ns.isConnected()){
               assert(_ns!=null );
               _appTab.removeListener(( cca.cfd.NSSolverSocketPort)port);
               _ns.disconnect(port);
               if(!_ns.isConnected()){
                 _appTab.removeListener(_ns);
                 disconnectDispatcherns();
                 _ns.close();
                 _ns = null;
               }
    }
  }
  
  public void disconnectDispatcherns() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=68;
     sendIntData(methodId);
     
  }
  
  


}
 


