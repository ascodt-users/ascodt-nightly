#ifndef CCA_CFD_NSABSTRACTIMPLEMENTATION_H_
#define CCA_CFD_NSABSTRACTIMPLEMENTATION_H_ 

//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
#include "cca/cfd/LBSolverNativeDispatcher.h"

#include "cca/cfd/NSSolver.h"
#include "cca/cfd/NS2LB.h"

#include "Component.h"
namespace cca { 
namespace cfd { 
  
     class NSAbstractImplementation;
} 
}



class cca::cfd::NSAbstractImplementation: public Component ,public cca::cfd::NSSolver,public cca::cfd::NS2LB{
     protected:
       cca::cfd::LBSolverNativeDispatcher* _lb;
   
     public:
       NSAbstractImplementation();
       virtual ~NSAbstractImplementation();
       /**
        * @see Case class 
        */
       void connectlb(cca::cfd::LBSolverNativeDispatcher* port);
       void disconnectlb();
 
		void retrievePressureCopyParallel(double* pressure, const int pressure_len);
		void retrieveJacobianCopyParallel(double* jacobian, const int jacobian_len);
		void retrieveVelocitiesCopyParallel(double* velocityX, const int velocityX_len,double* velocityY, const int velocityY_len,double* velocityZ, const int velocityZ_len);
		void retrieveVelocitiesSizeParallel(int& memory);
		void retrieveTimestepParallel(double& timestep);
		void iterateParallel();
		void syncrParallel(int& value);
		void plotParallel();
		void forwardVelocitiesParallel(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,const int* componentSize, const int componentSize_len,int& ackn);
		void iterateInnerParallel();
		void iterateBoundaryParallel();
		void closeNSProfilesParallel();
		void printNSProfilesParallel();
		void printNSPressureParallel();
		void setVelocitiesParallel(const double* velocitiesX, const int velocitiesX_len,const double* velocitiesY, const int velocitiesY_len,const double* velocitiesZ, const int velocitiesZ_len);
		void solveOneTimestepPhaseTwoParallel();
		void solveOneTimestepPhaseOneParallel();
		void solveParallel();
		void setupCommForLBRegionParallel(const int* startOfRegion, const int startOfRegion_len,const int* endOfRegion, const int endOfRegion_len,const std::string* commids, const int commids_len);
		void setupParallel(const std::string inputScenario);
};     


#endif
