//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class NS2LBNative2JavaPlainPort extends NS2LBAbstractPort {

  private long _ref;
  public NS2LBNative2JavaPlainPort() {
    super();
    createInstance();
  }
  
  public native void createInstance();
  public native void destroyInstance(long ref);
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  public void disconnect(NS2LB  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     super.disconnect(port);
  }
  
  public void destroy(){
     destroyInstance(_ref);    
  }
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }

  public void iterate() {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.iterate();
      //_destination.unlock();
    //}
  }
  
  public void iterateParallel() {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.iterateParallel();
      //_destination.unlock();
    //}
  }
  
  
  

  public void retrieveTimestep(double timestep[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveTimestep(timestep);
      //_destination.unlock();
    //}
  }
  
  public void retrieveTimestepParallel(double timestep[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveTimestepParallel(timestep);
      //_destination.unlock();
    //}
  }
  
  
  

  public void retrieveVelocitiesSize(int memory[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveVelocitiesSize(memory);
      //_destination.unlock();
    //}
  }
  
  public void retrieveVelocitiesSizeParallel(int memory[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveVelocitiesSizeParallel(memory);
      //_destination.unlock();
    //}
  }
  
  
  

  public void retrieveVelocitiesCopy(double velocityX[],double velocityY[],double velocityZ[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveVelocitiesCopy(velocityX,velocityY,velocityZ);
      //_destination.unlock();
    //}
  }
  
  public void retrieveVelocitiesCopyParallel(double velocityX[],double velocityY[],double velocityZ[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveVelocitiesCopyParallel(velocityX,velocityY,velocityZ);
      //_destination.unlock();
    //}
  }
  
  
  

  public void retrieveJacobianCopy(double jacobian[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveJacobianCopy(jacobian);
      //_destination.unlock();
    //}
  }
  
  public void retrieveJacobianCopyParallel(double jacobian[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrieveJacobianCopyParallel(jacobian);
      //_destination.unlock();
    //}
  }
  
  
  

  public void retrievePressureCopy(double pressure[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrievePressureCopy(pressure);
      //_destination.unlock();
    //}
  }
  
  public void retrievePressureCopyParallel(double pressure[]) {
   // if (_destination!=null) {
      //_destination.lock();
      _destination.retrievePressureCopyParallel(pressure);
      //_destination.unlock();
    //}
  }
  
  
  


}
 


