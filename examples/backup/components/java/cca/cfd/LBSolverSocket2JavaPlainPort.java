//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class LBSolverSocket2JavaPlainPort extends LBSolverAbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  interface LBSolverSocketInvoker {
    void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException;
  } 
  private long _ref;
  private LBSolverSocketInvoker[] _invokers;
  private java.util.concurrent.ExecutorService _executor;
  public LBSolverSocket2JavaPlainPort(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super(host,port);
    _invokers = new  LBSolverSocketInvoker[249];
    	_invokers[23]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setup();
		}
	};
	_invokers[24]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupParallel();
		}
	};
	_invokers[25]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForNSRegion();
		}
	};
	_invokers[26]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForNSRegionParallel();
		}
	};
	_invokers[27]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solve();
		}
	};
	_invokers[28]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveParallel();
		}
	};
	_invokers[29]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestep();
		}
	};
	_invokers[30]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepParallel();
		}
	};
	_invokers[31]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocities();
		}
	};
	_invokers[32]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocitiesParallel();
		}
	};
	_invokers[33]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setPressure();
		}
	};
	_invokers[34]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setPressureParallel();
		}
	};
	_invokers[35]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setGradients();
		}
	};
	_invokers[36]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setGradientsParallel();
		}
	};
	_invokers[37]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeLBProfiles();
		}
	};
	_invokers[38]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeLBProfilesParallel();
		}
	};
	_invokers[39]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBDensity();
		}
	};
	_invokers[40]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBDensityParallel();
		}
	};
	_invokers[41]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBProfiles();
		}
	};
	_invokers[42]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBProfilesParallel();
		}
	};
	_invokers[43]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocities();
		}
	};
	_invokers[44]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocitiesParallel();
		}
	};
	_invokers[45]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardPressure();
		}
	};
	_invokers[46]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardPressureParallel();
		}
	};
	_invokers[47]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncr();
		}
	};
	_invokers[48]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncrParallel();
		}
	};
	_invokers[49]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plot();
		}
	};
	_invokers[50]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plotParallel();
		}
	};

  }
  
  public LBSolverSocket2JavaPlainPort() throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super();
    _invokers = new  LBSolverSocketInvoker[249];
    	_invokers[23]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setup();
		}
	};
	_invokers[24]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupParallel();
		}
	};
	_invokers[25]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForNSRegion();
		}
	};
	_invokers[26]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForNSRegionParallel();
		}
	};
	_invokers[27]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solve();
		}
	};
	_invokers[28]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveParallel();
		}
	};
	_invokers[29]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestep();
		}
	};
	_invokers[30]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepParallel();
		}
	};
	_invokers[31]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocities();
		}
	};
	_invokers[32]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocitiesParallel();
		}
	};
	_invokers[33]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setPressure();
		}
	};
	_invokers[34]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setPressureParallel();
		}
	};
	_invokers[35]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setGradients();
		}
	};
	_invokers[36]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setGradientsParallel();
		}
	};
	_invokers[37]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeLBProfiles();
		}
	};
	_invokers[38]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeLBProfilesParallel();
		}
	};
	_invokers[39]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBDensity();
		}
	};
	_invokers[40]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBDensityParallel();
		}
	};
	_invokers[41]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBProfiles();
		}
	};
	_invokers[42]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printLBProfilesParallel();
		}
	};
	_invokers[43]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocities();
		}
	};
	_invokers[44]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocitiesParallel();
		}
	};
	_invokers[45]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardPressure();
		}
	};
	_invokers[46]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardPressureParallel();
		}
	};
	_invokers[47]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncr();
		}
	};
	_invokers[48]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncrParallel();
		}
	};
	_invokers[49]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plot();
		}
	};
	_invokers[50]= new LBSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plotParallel();
		}
	};

  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    _executor=java.util.concurrent.Executors.newSingleThreadExecutor();
    _executor.execute(this);           
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=0;
     sendIntData(methodId);
     _ref=readLongData();
    
  }
  public void destroyInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=1;
     sendIntData(methodId);
     sendLongData(_ref);
          
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(LBSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void close(){
     if(_executor!=null&&!_executor.isShutdown())
          _executor.shutdownNow();
     super.close();
  }
  public void run(){
     int methodId=0;
     try{
          methodId=readIntData(); 
          while(methodId!=-1){
             
              _invokers[methodId].invoke();
              methodId=readIntData();      
          }
         
     }catch(Exception e){
          de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
     }
     super.close();
  }

  public void invoke_plot() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     plot();
     
  }
  public void invoke_plotParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void plot() {
     _destination.plot();
  }
  public void plotParallel() {
     _destination.plotParallel();
  }
  
  

  public void invoke_syncr() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int [] value= new int[1];
readIntData(value,1);

     syncr(value);
     sendIntData(value);

  }
  public void invoke_syncrParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void syncr(int value[]) {
     _destination.syncr(value);
  }
  public void syncrParallel(int value[]) {
     _destination.syncrParallel(value);
  }
  
  

  public void invoke_forwardPressure() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int keys_len=readIntData();
int []keys=new int[keys_len];
readIntData(keys,keys_len);
int offsets_len=readIntData();
int []offsets=new int[offsets_len];
readIntData(offsets,offsets_len);
int flips_len=readIntData();
int []flips=new int[flips_len];
readIntData(flips,flips_len);
int values_len=readIntData();
double []values=new double[values_len];
readDoubleData(values,values_len);
int [] ackn= new int[1];
readIntData(ackn,1);

     forwardPressure(keys,offsets,flips,values,ackn);
     sendIntData(ackn);

  }
  public void invoke_forwardPressureParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void forwardPressure(int keys[],int offsets[],int flips[],double values[],int ackn[]) {
     _destination.forwardPressure(keys,offsets,flips,values,ackn);
  }
  public void forwardPressureParallel(int keys[],int offsets[],int flips[],double values[],int ackn[]) {
     _destination.forwardPressureParallel(keys,offsets,flips,values,ackn);
  }
  
  

  public void invoke_forwardVelocities() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int keys_len=readIntData();
int []keys=new int[keys_len];
readIntData(keys,keys_len);
int offsets_len=readIntData();
int []offsets=new int[offsets_len];
readIntData(offsets,offsets_len);
int flips_len=readIntData();
int []flips=new int[flips_len];
readIntData(flips,flips_len);
int values_len=readIntData();
double []values=new double[values_len];
readDoubleData(values,values_len);
int componentSize_len=readIntData();
int []componentSize=new int[componentSize_len];
readIntData(componentSize,componentSize_len);
int [] ackn= new int[1];
readIntData(ackn,1);

     forwardVelocities(keys,offsets,flips,values,componentSize,ackn);
     sendIntData(ackn);

  }
  public void invoke_forwardVelocitiesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void forwardVelocities(int keys[],int offsets[],int flips[],double values[],int componentSize[],int ackn[]) {
     _destination.forwardVelocities(keys,offsets,flips,values,componentSize,ackn);
  }
  public void forwardVelocitiesParallel(int keys[],int offsets[],int flips[],double values[],int componentSize[],int ackn[]) {
     _destination.forwardVelocitiesParallel(keys,offsets,flips,values,componentSize,ackn);
  }
  
  

  public void invoke_printLBProfiles() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     printLBProfiles();
     
  }
  public void invoke_printLBProfilesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void printLBProfiles() {
     _destination.printLBProfiles();
  }
  public void printLBProfilesParallel() {
     _destination.printLBProfilesParallel();
  }
  
  

  public void invoke_printLBDensity() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     printLBDensity();
     
  }
  public void invoke_printLBDensityParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void printLBDensity() {
     _destination.printLBDensity();
  }
  public void printLBDensityParallel() {
     _destination.printLBDensityParallel();
  }
  
  

  public void invoke_closeLBProfiles() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     closeLBProfiles();
     
  }
  public void invoke_closeLBProfilesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void closeLBProfiles() {
     _destination.closeLBProfiles();
  }
  public void closeLBProfilesParallel() {
     _destination.closeLBProfilesParallel();
  }
  
  

  public void invoke_setGradients() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int gradients_len=readIntData();
double []gradients=new double[gradients_len];
readDoubleData(gradients,gradients_len);

     setGradients(gradients);
     
  }
  public void invoke_setGradientsParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setGradients(final double gradients[]) {
     _destination.setGradients(gradients);
  }
  public void setGradientsParallel(final double gradients[]) {
     _destination.setGradientsParallel(gradients);
  }
  
  

  public void invoke_setPressure() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int pressure_len=readIntData();
double []pressure=new double[pressure_len];
readDoubleData(pressure,pressure_len);

     setPressure(pressure);
     
  }
  public void invoke_setPressureParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setPressure(final double pressure[]) {
     _destination.setPressure(pressure);
  }
  public void setPressureParallel(final double pressure[]) {
     _destination.setPressureParallel(pressure);
  }
  
  

  public void invoke_setVelocities() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int velocitiesX_len=readIntData();
double []velocitiesX=new double[velocitiesX_len];
readDoubleData(velocitiesX,velocitiesX_len);
int velocitiesY_len=readIntData();
double []velocitiesY=new double[velocitiesY_len];
readDoubleData(velocitiesY,velocitiesY_len);
int velocitiesZ_len=readIntData();
double []velocitiesZ=new double[velocitiesZ_len];
readDoubleData(velocitiesZ,velocitiesZ_len);

     setVelocities(velocitiesX,velocitiesY,velocitiesZ);
     
  }
  public void invoke_setVelocitiesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setVelocities(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
     _destination.setVelocities(velocitiesX,velocitiesY,velocitiesZ);
  }
  public void setVelocitiesParallel(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
     _destination.setVelocitiesParallel(velocitiesX,velocitiesY,velocitiesZ);
  }
  
  

  public void invoke_solveOneTimestep() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     solveOneTimestep();
     
  }
  public void invoke_solveOneTimestepParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void solveOneTimestep() {
     _destination.solveOneTimestep();
  }
  public void solveOneTimestepParallel() {
     _destination.solveOneTimestepParallel();
  }
  
  

  public void invoke_solve() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     solve();
     
  }
  public void invoke_solveParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void solve() {
     _destination.solve();
  }
  public void solveParallel() {
     _destination.solveParallel();
  }
  
  

  public void invoke_setupCommForNSRegion() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int startOfRegion_len=readIntData();
int []startOfRegion=new int[startOfRegion_len];
readIntData(startOfRegion,startOfRegion_len);
int endOfRegion_len=readIntData();
int []endOfRegion=new int[endOfRegion_len];
readIntData(endOfRegion,endOfRegion_len);
int commids_len=readIntData();
String []commids=new String[commids_len];
readStringData(commids,commids_len);

     setupCommForNSRegion(startOfRegion,endOfRegion,commids);
     
  }
  public void invoke_setupCommForNSRegionParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setupCommForNSRegion(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
     _destination.setupCommForNSRegion(startOfRegion,endOfRegion,commids);
  }
  public void setupCommForNSRegionParallel(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
     _destination.setupCommForNSRegionParallel(startOfRegion,endOfRegion,commids);
  }
  
  

  public void invoke_setup() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     String inputScenario=readStringData();

     setup(inputScenario);
     
  }
  public void invoke_setupParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setup(final String inputScenario) {
     _destination.setup(inputScenario);
  }
  public void setupParallel(final String inputScenario) {
     _destination.setupParallel(inputScenario);
  }
  
  


}
 


