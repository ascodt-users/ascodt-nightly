//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class NSSolverSocket2JavaPlainPort extends NSSolverAbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  interface NSSolverSocketInvoker {
    void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException;
  } 
  private long _ref;
  private NSSolverSocketInvoker[] _invokers;
  private java.util.concurrent.ExecutorService _executor;
  public NSSolverSocket2JavaPlainPort(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super(host,port);
    _invokers = new  NSSolverSocketInvoker[295];
    	_invokers[69]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setup();
		}
	};
	_invokers[70]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupParallel();
		}
	};
	_invokers[71]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForLBRegion();
		}
	};
	_invokers[72]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForLBRegionParallel();
		}
	};
	_invokers[73]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solve();
		}
	};
	_invokers[74]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveParallel();
		}
	};
	_invokers[75]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseOne();
		}
	};
	_invokers[76]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseOneParallel();
		}
	};
	_invokers[77]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseTwo();
		}
	};
	_invokers[78]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseTwoParallel();
		}
	};
	_invokers[79]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocities();
		}
	};
	_invokers[80]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocitiesParallel();
		}
	};
	_invokers[81]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSPressure();
		}
	};
	_invokers[82]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSPressureParallel();
		}
	};
	_invokers[83]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSProfiles();
		}
	};
	_invokers[84]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSProfilesParallel();
		}
	};
	_invokers[85]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeNSProfiles();
		}
	};
	_invokers[86]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeNSProfilesParallel();
		}
	};
	_invokers[87]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundary();
		}
	};
	_invokers[88]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundaryParallel();
		}
	};
	_invokers[89]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInner();
		}
	};
	_invokers[90]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInnerParallel();
		}
	};
	_invokers[91]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocities();
		}
	};
	_invokers[92]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocitiesParallel();
		}
	};
	_invokers[93]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plot();
		}
	};
	_invokers[94]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plotParallel();
		}
	};
	_invokers[95]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncr();
		}
	};
	_invokers[96]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncrParallel();
		}
	};

  }
  
  public NSSolverSocket2JavaPlainPort() throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super();
    _invokers = new  NSSolverSocketInvoker[295];
    	_invokers[69]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setup();
		}
	};
	_invokers[70]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupParallel();
		}
	};
	_invokers[71]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForLBRegion();
		}
	};
	_invokers[72]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setupCommForLBRegionParallel();
		}
	};
	_invokers[73]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solve();
		}
	};
	_invokers[74]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveParallel();
		}
	};
	_invokers[75]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseOne();
		}
	};
	_invokers[76]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseOneParallel();
		}
	};
	_invokers[77]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseTwo();
		}
	};
	_invokers[78]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_solveOneTimestepPhaseTwoParallel();
		}
	};
	_invokers[79]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocities();
		}
	};
	_invokers[80]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_setVelocitiesParallel();
		}
	};
	_invokers[81]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSPressure();
		}
	};
	_invokers[82]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSPressureParallel();
		}
	};
	_invokers[83]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSProfiles();
		}
	};
	_invokers[84]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_printNSProfilesParallel();
		}
	};
	_invokers[85]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeNSProfiles();
		}
	};
	_invokers[86]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_closeNSProfilesParallel();
		}
	};
	_invokers[87]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundary();
		}
	};
	_invokers[88]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundaryParallel();
		}
	};
	_invokers[89]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInner();
		}
	};
	_invokers[90]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInnerParallel();
		}
	};
	_invokers[91]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocities();
		}
	};
	_invokers[92]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardVelocitiesParallel();
		}
	};
	_invokers[93]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plot();
		}
	};
	_invokers[94]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_plotParallel();
		}
	};
	_invokers[95]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncr();
		}
	};
	_invokers[96]= new NSSolverSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_syncrParallel();
		}
	};

  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    _executor=java.util.concurrent.Executors.newSingleThreadExecutor();
    _executor.execute(this);           
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=0;
     sendIntData(methodId);
     _ref=readLongData();
    
  }
  public void destroyInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=1;
     sendIntData(methodId);
     sendLongData(_ref);
          
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(NSSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void close(){
     if(_executor!=null&&!_executor.isShutdown())
          _executor.shutdownNow();
     super.close();
  }
  public void run(){
     int methodId=0;
     try{
          methodId=readIntData(); 
          while(methodId!=-1){
             
              _invokers[methodId].invoke();
              methodId=readIntData();      
          }
         
     }catch(Exception e){
          de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
     }
     super.close();
  }

  public void invoke_syncr() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int [] value= new int[1];
readIntData(value,1);

     syncr(value);
     sendIntData(value);

  }
  public void invoke_syncrParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void syncr(int value[]) {
     _destination.syncr(value);
  }
  public void syncrParallel(int value[]) {
     _destination.syncrParallel(value);
  }
  
  

  public void invoke_plot() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     plot();
     
  }
  public void invoke_plotParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void plot() {
     _destination.plot();
  }
  public void plotParallel() {
     _destination.plotParallel();
  }
  
  

  public void invoke_forwardVelocities() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int keys_len=readIntData();
int []keys=new int[keys_len];
readIntData(keys,keys_len);
int offsets_len=readIntData();
int []offsets=new int[offsets_len];
readIntData(offsets,offsets_len);
int flips_len=readIntData();
int []flips=new int[flips_len];
readIntData(flips,flips_len);
int values_len=readIntData();
double []values=new double[values_len];
readDoubleData(values,values_len);
int componentSize_len=readIntData();
int []componentSize=new int[componentSize_len];
readIntData(componentSize,componentSize_len);
int [] ackn= new int[1];
readIntData(ackn,1);

     forwardVelocities(keys,offsets,flips,values,componentSize,ackn);
     sendIntData(ackn);

  }
  public void invoke_forwardVelocitiesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void forwardVelocities(int keys[],int offsets[],int flips[],double values[],int componentSize[],int ackn[]) {
     _destination.forwardVelocities(keys,offsets,flips,values,componentSize,ackn);
  }
  public void forwardVelocitiesParallel(int keys[],int offsets[],int flips[],double values[],int componentSize[],int ackn[]) {
     _destination.forwardVelocitiesParallel(keys,offsets,flips,values,componentSize,ackn);
  }
  
  

  public void invoke_iterateInner() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     iterateInner();
     
  }
  public void invoke_iterateInnerParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void iterateInner() {
     _destination.iterateInner();
  }
  public void iterateInnerParallel() {
     _destination.iterateInnerParallel();
  }
  
  

  public void invoke_iterateBoundary() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     iterateBoundary();
     
  }
  public void invoke_iterateBoundaryParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void iterateBoundary() {
     _destination.iterateBoundary();
  }
  public void iterateBoundaryParallel() {
     _destination.iterateBoundaryParallel();
  }
  
  

  public void invoke_closeNSProfiles() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     closeNSProfiles();
     
  }
  public void invoke_closeNSProfilesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void closeNSProfiles() {
     _destination.closeNSProfiles();
  }
  public void closeNSProfilesParallel() {
     _destination.closeNSProfilesParallel();
  }
  
  

  public void invoke_printNSProfiles() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     printNSProfiles();
     
  }
  public void invoke_printNSProfilesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void printNSProfiles() {
     _destination.printNSProfiles();
  }
  public void printNSProfilesParallel() {
     _destination.printNSProfilesParallel();
  }
  
  

  public void invoke_printNSPressure() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     printNSPressure();
     
  }
  public void invoke_printNSPressureParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void printNSPressure() {
     _destination.printNSPressure();
  }
  public void printNSPressureParallel() {
     _destination.printNSPressureParallel();
  }
  
  

  public void invoke_setVelocities() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int velocitiesX_len=readIntData();
double []velocitiesX=new double[velocitiesX_len];
readDoubleData(velocitiesX,velocitiesX_len);
int velocitiesY_len=readIntData();
double []velocitiesY=new double[velocitiesY_len];
readDoubleData(velocitiesY,velocitiesY_len);
int velocitiesZ_len=readIntData();
double []velocitiesZ=new double[velocitiesZ_len];
readDoubleData(velocitiesZ,velocitiesZ_len);

     setVelocities(velocitiesX,velocitiesY,velocitiesZ);
     
  }
  public void invoke_setVelocitiesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setVelocities(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
     _destination.setVelocities(velocitiesX,velocitiesY,velocitiesZ);
  }
  public void setVelocitiesParallel(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
     _destination.setVelocitiesParallel(velocitiesX,velocitiesY,velocitiesZ);
  }
  
  

  public void invoke_solveOneTimestepPhaseTwo() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     solveOneTimestepPhaseTwo();
     
  }
  public void invoke_solveOneTimestepPhaseTwoParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void solveOneTimestepPhaseTwo() {
     _destination.solveOneTimestepPhaseTwo();
  }
  public void solveOneTimestepPhaseTwoParallel() {
     _destination.solveOneTimestepPhaseTwoParallel();
  }
  
  

  public void invoke_solveOneTimestepPhaseOne() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     solveOneTimestepPhaseOne();
     
  }
  public void invoke_solveOneTimestepPhaseOneParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void solveOneTimestepPhaseOne() {
     _destination.solveOneTimestepPhaseOne();
  }
  public void solveOneTimestepPhaseOneParallel() {
     _destination.solveOneTimestepPhaseOneParallel();
  }
  
  

  public void invoke_solve() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     solve();
     
  }
  public void invoke_solveParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void solve() {
     _destination.solve();
  }
  public void solveParallel() {
     _destination.solveParallel();
  }
  
  

  public void invoke_setupCommForLBRegion() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int startOfRegion_len=readIntData();
int []startOfRegion=new int[startOfRegion_len];
readIntData(startOfRegion,startOfRegion_len);
int endOfRegion_len=readIntData();
int []endOfRegion=new int[endOfRegion_len];
readIntData(endOfRegion,endOfRegion_len);
int commids_len=readIntData();
String []commids=new String[commids_len];
readStringData(commids,commids_len);

     setupCommForLBRegion(startOfRegion,endOfRegion,commids);
     
  }
  public void invoke_setupCommForLBRegionParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setupCommForLBRegion(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
     _destination.setupCommForLBRegion(startOfRegion,endOfRegion,commids);
  }
  public void setupCommForLBRegionParallel(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
     _destination.setupCommForLBRegionParallel(startOfRegion,endOfRegion,commids);
  }
  
  

  public void invoke_setup() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     String inputScenario=readStringData();

     setup(inputScenario);
     
  }
  public void invoke_setupParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void setup(final String inputScenario) {
     _destination.setup(inputScenario);
  }
  public void setupParallel(final String inputScenario) {
     _destination.setupParallel(inputScenario);
  }
  
  


}
 


