//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class NS2LBDispatcher implements NS2LB {

  protected java.util.Set<NS2LB>  _destinations;
  
  public NS2LBDispatcher() {
    _destinations = java.util.Collections.synchronizedSet(new java.util.HashSet<NS2LB>());
  }
  
  public long getReference(){
    return 0;
  }
  
  
  public void setReference(long ref){
  }
  /**
   * Connect a uses port.
   *
   * @throw If already connected to another port.
   * @see Operation with name of any implementing component 
   */
  public void connect(NS2LB  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    if (_destinations==null) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connect(...)", "port already was connected", null );
    }
    _destinations.add(port);
  }
    
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  public void disconnect(NS2LB  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    if (_destinations==null) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnect(...)", "tried to disconnect port that was not connected before", null );
    }
     
    if (!_destinations.contains(port)) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnect(...)", "tried to disconnect port from port that was not connected before", null );
    }
    _destinations.remove(port);
  }
  
  public boolean isConnected(){
     return !_destinations.isEmpty();
  }
  
  public void iterate() {
    for(NS2LB port: _destinations)
      port.iterate();
  }
  
  public void iterateParallel() {
    for(NS2LB port: _destinations)
      port.iterateParallel();
  }
  
  public void iterateForIntegerEnums() {
    for(NS2LB port: _destinations){
      
      port.iterate();
      
    }
  }
  public void retrieveTimestep(double timestep[]) {
    for(NS2LB port: _destinations)
      port.retrieveTimestep(timestep);
  }
  
  public void retrieveTimestepParallel(double timestep[]) {
    for(NS2LB port: _destinations)
      port.retrieveTimestepParallel(timestep);
  }
  
  public void retrieveTimestepForIntegerEnums(double timestep[]) {
    for(NS2LB port: _destinations){
      
      port.retrieveTimestep(timestep);
      
    }
  }
  public void retrieveVelocitiesSize(int memory[]) {
    for(NS2LB port: _destinations)
      port.retrieveVelocitiesSize(memory);
  }
  
  public void retrieveVelocitiesSizeParallel(int memory[]) {
    for(NS2LB port: _destinations)
      port.retrieveVelocitiesSizeParallel(memory);
  }
  
  public void retrieveVelocitiesSizeForIntegerEnums(int memory[]) {
    for(NS2LB port: _destinations){
      
      port.retrieveVelocitiesSize(memory);
      
    }
  }
  public void retrieveVelocitiesCopy(double velocityX[],double velocityY[],double velocityZ[]) {
    for(NS2LB port: _destinations)
      port.retrieveVelocitiesCopy(velocityX,velocityY,velocityZ);
  }
  
  public void retrieveVelocitiesCopyParallel(double velocityX[],double velocityY[],double velocityZ[]) {
    for(NS2LB port: _destinations)
      port.retrieveVelocitiesCopyParallel(velocityX,velocityY,velocityZ);
  }
  
  public void retrieveVelocitiesCopyForIntegerEnums(double velocityX[],double velocityY[],double velocityZ[]) {
    for(NS2LB port: _destinations){
      
      port.retrieveVelocitiesCopy(velocityX,velocityY,velocityZ);
      
    }
  }
  public void retrieveJacobianCopy(double jacobian[]) {
    for(NS2LB port: _destinations)
      port.retrieveJacobianCopy(jacobian);
  }
  
  public void retrieveJacobianCopyParallel(double jacobian[]) {
    for(NS2LB port: _destinations)
      port.retrieveJacobianCopyParallel(jacobian);
  }
  
  public void retrieveJacobianCopyForIntegerEnums(double jacobian[]) {
    for(NS2LB port: _destinations){
      
      port.retrieveJacobianCopy(jacobian);
      
    }
  }
  public void retrievePressureCopy(double pressure[]) {
    for(NS2LB port: _destinations)
      port.retrievePressureCopy(pressure);
  }
  
  public void retrievePressureCopyParallel(double pressure[]) {
    for(NS2LB port: _destinations)
      port.retrievePressureCopyParallel(pressure);
  }
  
  public void retrievePressureCopyForIntegerEnums(double pressure[]) {
    for(NS2LB port: _destinations){
      
      port.retrievePressureCopy(pressure);
      
    }
  }
  
//  public void lock() {
//    if (_destination!=null) {
//      _destination.lock();
//    }
//  }
 
//  public void unlock() {
//    if (_destination!=null) {
//      _destination.unlock();
//    }
//  }
  
}
 


