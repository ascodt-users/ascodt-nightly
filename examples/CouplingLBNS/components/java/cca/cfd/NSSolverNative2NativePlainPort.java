//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class NSSolverNative2NativePlainPort extends NSSolverAbstractPort {
  private long _ref;
  public NSSolverNative2NativePlainPort() {
    super();
    createInstance();
  }
  /**
   * proxy for the native factory method
   */  
  public native void createInstance();
  
  /**
   * frees the memory of the component
   */
  public native void destroyInstance(long ref);
  
  
  /**
   * Connect a uses port.
   *
   * @throw If already connected to another port.
   * @see Operation with name of any implementing component 
   */
  @Override
  public void connect(NSSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super.connect(port);
    connect(_ref,_destination.getReference());
  }
  
  public native void connect(long ref,long cca_application);
   
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  public void disconnect(NSSolver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     super.disconnect(port);
  }
  
  public void destroy(){
     destroyInstance(_ref);
  }
  
  public long getReference(){
    return _ref;
  }
  
  public void setReference(long ref){
     _ref=ref;
  }

  public void setup(final String inputScenario) {
    //DO NOTHING HERE
  }
  
   public void setupParallel(final String inputScenario) {
    //DO NOTHING HERE
  }
  

  public void setupCommForLBRegion(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
    //DO NOTHING HERE
  }
  
   public void setupCommForLBRegionParallel(final int startOfRegion[],final int endOfRegion[],final String commids[]) {
    //DO NOTHING HERE
  }
  

  public void solve() {
    //DO NOTHING HERE
  }
  
   public void solveParallel() {
    //DO NOTHING HERE
  }
  

  public void solveOneTimestepPhaseOne() {
    //DO NOTHING HERE
  }
  
   public void solveOneTimestepPhaseOneParallel() {
    //DO NOTHING HERE
  }
  

  public void solveOneTimestepPhaseTwo() {
    //DO NOTHING HERE
  }
  
   public void solveOneTimestepPhaseTwoParallel() {
    //DO NOTHING HERE
  }
  

  public void setVelocities(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
    //DO NOTHING HERE
  }
  
   public void setVelocitiesParallel(final double velocitiesX[],final double velocitiesY[],final double velocitiesZ[]) {
    //DO NOTHING HERE
  }
  

  public void printNSPressure() {
    //DO NOTHING HERE
  }
  
   public void printNSPressureParallel() {
    //DO NOTHING HERE
  }
  

  public void printNSProfiles() {
    //DO NOTHING HERE
  }
  
   public void printNSProfilesParallel() {
    //DO NOTHING HERE
  }
  

  public void closeNSProfiles() {
    //DO NOTHING HERE
  }
  
   public void closeNSProfilesParallel() {
    //DO NOTHING HERE
  }
  

  public void iterateBoundary() {
    //DO NOTHING HERE
  }
  
   public void iterateBoundaryParallel() {
    //DO NOTHING HERE
  }
  

  public void iterateInner() {
    //DO NOTHING HERE
  }
  
   public void iterateInnerParallel() {
    //DO NOTHING HERE
  }
  

  public void forwardVelocities(int keys[],int offsets[],int flips[],double values[],int ackn[]) {
    //DO NOTHING HERE
  }
  
   public void forwardVelocitiesParallel(int keys[],int offsets[],int flips[],double values[],int ackn[]) {
    //DO NOTHING HERE
  }
  

  public void plot() {
    //DO NOTHING HERE
  }
  
   public void plotParallel() {
    //DO NOTHING HERE
  }
  

  public void syncr(int value[]) {
    //DO NOTHING HERE
  }
  
   public void syncrParallel(int value[]) {
    //DO NOTHING HERE
  }
  
  

}
 


