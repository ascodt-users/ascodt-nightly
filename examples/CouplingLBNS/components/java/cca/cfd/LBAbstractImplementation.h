#ifndef CCA_CFD_LBABSTRACTIMPLEMENTATION_H_
#define CCA_CFD_LBABSTRACTIMPLEMENTATION_H_ 

//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
#include "cca/cfd/NSSolverNativeDispatcher.h"

#include "cca/cfd/LBSolver.h"
#include "cca/cfd/LB2NS.h"

#include "Component.h"
namespace cca { 
namespace cfd { 
  
     class LBAbstractImplementation;
} 
}



class cca::cfd::LBAbstractImplementation: public Component ,public cca::cfd::LBSolver,public cca::cfd::LB2NS{
     protected:
       cca::cfd::NSSolverNativeDispatcher* _ns;
   
     public:
       LBAbstractImplementation();
       virtual ~LBAbstractImplementation();
       /**
        * @see Case class 
        */
       void connectns(cca::cfd::NSSolverNativeDispatcher* port);
       void disconnectns();
 
		void retrieveVelocitiesCopyParallel(double* velocityX, const int velocityX_len,double* velocityY, const int velocityY_len,double* velocityZ, const int velocityZ_len);
		void retrieveVelocitiesSizeParallel(int& memoryX,int& memoryY,int& memoryZ);
		void retrieveTimestepParallel(double& dt);
		void iterateInnerParallel();
		void iterateBoundaryParallel();
		void plotParallel();
		void syncrParallel(int& value);
		void forwardPressureParallel(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn);
		void forwardVelocitiesParallel(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn);
		void printLBProfilesParallel();
		void printLBDensityParallel();
		void closeLBProfilesParallel();
		void setGradientsParallel(const double* gradients, const int gradients_len);
		void setPressureParallel(const double* pressure, const int pressure_len);
		void setVelocitiesParallel(const double* velocitiesX, const int velocitiesX_len,const double* velocitiesY, const int velocitiesY_len,const double* velocitiesZ, const int velocitiesZ_len);
		void solveOneTimestepParallel();
		void solveParallel();
		void setupCommForNSRegionParallel(const int* startOfRegion, const int startOfRegion_len,const int* endOfRegion, const int endOfRegion_len,const std::string* commids, const int commids_len);
		void setupParallel(const std::string inputScenario);
};     


#endif
