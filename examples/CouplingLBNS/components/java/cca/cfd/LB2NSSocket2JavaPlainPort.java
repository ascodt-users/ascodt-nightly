//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package cca.cfd;


public class LB2NSSocket2JavaPlainPort extends LB2NSAbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  interface LB2NSSocketInvoker {
    void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException;
  } 
  private long _ref;
  private LB2NSSocketInvoker[] _invokers;
  private java.util.concurrent.ExecutorService _executor;
  public LB2NSSocket2JavaPlainPort(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super(host,port);
    _invokers = new  LB2NSSocketInvoker[218];
    	_invokers[10]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundary();
		}
	};
	_invokers[11]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundaryParallel();
		}
	};
	_invokers[12]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInner();
		}
	};
	_invokers[13]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInnerParallel();
		}
	};
	_invokers[14]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveTimestep();
		}
	};
	_invokers[15]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveTimestepParallel();
		}
	};
	_invokers[16]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesSize();
		}
	};
	_invokers[17]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesSizeParallel();
		}
	};
	_invokers[18]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesCopy();
		}
	};
	_invokers[19]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesCopyParallel();
		}
	};

  }
  
  public LB2NSSocket2JavaPlainPort() throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super();
    _invokers = new  LB2NSSocketInvoker[218];
    	_invokers[10]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundary();
		}
	};
	_invokers[11]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateBoundaryParallel();
		}
	};
	_invokers[12]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInner();
		}
	};
	_invokers[13]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_iterateInnerParallel();
		}
	};
	_invokers[14]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveTimestep();
		}
	};
	_invokers[15]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveTimestepParallel();
		}
	};
	_invokers[16]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesSize();
		}
	};
	_invokers[17]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesSizeParallel();
		}
	};
	_invokers[18]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesCopy();
		}
	};
	_invokers[19]= new LB2NSSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_retrieveVelocitiesCopyParallel();
		}
	};

  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    _executor=java.util.concurrent.Executors.newSingleThreadExecutor();
    _executor.execute(this);           
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=0;
     sendIntData(methodId);
     _ref=readLongData();
    
  }
  public void destroyInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=1;
     sendIntData(methodId);
     sendLongData(_ref);
          
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(LB2NS  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void close(){
     if(_executor!=null&&!_executor.isShutdown())
          _executor.shutdownNow();
     super.close();
  }
  public void run(){
     int methodId=0;
     try{
          methodId=readIntData(); 
          while(methodId!=-1){
             
              _invokers[methodId].invoke();
              methodId=readIntData();      
          }
         
     }catch(Exception e){
          de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
     }
     super.close();
  }

  public void invoke_retrieveVelocitiesCopy() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int velocityX_len=readIntData();
double []velocityX=new double[velocityX_len];
readDoubleData(velocityX,velocityX_len);
int velocityY_len=readIntData();
double []velocityY=new double[velocityY_len];
readDoubleData(velocityY,velocityY_len);
int velocityZ_len=readIntData();
double []velocityZ=new double[velocityZ_len];
readDoubleData(velocityZ,velocityZ_len);

     retrieveVelocitiesCopy(velocityX,velocityY,velocityZ);
     sendIntData(velocityX.length);
sendDoubleData(velocityX);
sendIntData(velocityY.length);
sendDoubleData(velocityY);
sendIntData(velocityZ.length);
sendDoubleData(velocityZ);

  }
  public void invoke_retrieveVelocitiesCopyParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void retrieveVelocitiesCopy(double velocityX[],double velocityY[],double velocityZ[]) {
     _destination.retrieveVelocitiesCopy(velocityX,velocityY,velocityZ);
  }
  public void retrieveVelocitiesCopyParallel(double velocityX[],double velocityY[],double velocityZ[]) {
     _destination.retrieveVelocitiesCopyParallel(velocityX,velocityY,velocityZ);
  }
  
  

  public void invoke_retrieveVelocitiesSize() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int [] memoryX= new int[1];
readIntData(memoryX,1);
int [] memoryY= new int[1];
readIntData(memoryY,1);
int [] memoryZ= new int[1];
readIntData(memoryZ,1);

     retrieveVelocitiesSize(memoryX,memoryY,memoryZ);
     sendIntData(memoryX);
sendIntData(memoryY);
sendIntData(memoryZ);

  }
  public void invoke_retrieveVelocitiesSizeParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void retrieveVelocitiesSize(int memoryX[],int memoryY[],int memoryZ[]) {
     _destination.retrieveVelocitiesSize(memoryX,memoryY,memoryZ);
  }
  public void retrieveVelocitiesSizeParallel(int memoryX[],int memoryY[],int memoryZ[]) {
     _destination.retrieveVelocitiesSizeParallel(memoryX,memoryY,memoryZ);
  }
  
  

  public void invoke_retrieveTimestep() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     double [] dt= new double[1];
readDoubleData(dt,1);

     retrieveTimestep(dt);
     sendDoubleData(dt);

  }
  public void invoke_retrieveTimestepParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void retrieveTimestep(double dt[]) {
     _destination.retrieveTimestep(dt);
  }
  public void retrieveTimestepParallel(double dt[]) {
     _destination.retrieveTimestepParallel(dt);
  }
  
  

  public void invoke_iterateInner() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     iterateInner();
     
  }
  public void invoke_iterateInnerParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void iterateInner() {
     _destination.iterateInner();
  }
  public void iterateInnerParallel() {
     _destination.iterateInnerParallel();
  }
  
  

  public void invoke_iterateBoundary() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     iterateBoundary();
     
  }
  public void invoke_iterateBoundaryParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void iterateBoundary() {
     _destination.iterateBoundary();
  }
  public void iterateBoundaryParallel() {
     _destination.iterateBoundaryParallel();
  }
  
  


}
 


