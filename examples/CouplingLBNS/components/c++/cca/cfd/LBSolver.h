#ifndef CCA_CFD_LBSOLVER_H_
#define CCA_CFD_LBSOLVER_H_ 

//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//

#include <iostream>
#include <string>



namespace cca { 
namespace cfd { 
  
     class LBSolver;
} 
}

class cca::cfd::LBSolver {
  public:
    virtual ~LBSolver(){}
     virtual void plot()=0;
     virtual void plotParallel()=0;
     virtual void syncr(int& value)=0;
     virtual void syncrParallel(int& value)=0;
     virtual void forwardPressure(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn)=0;
     virtual void forwardPressureParallel(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn)=0;
     virtual void forwardVelocities(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn)=0;
     virtual void forwardVelocitiesParallel(const int* keys, const int keys_len,const int* offsets, const int offsets_len,const int* flips, const int flips_len,const double* values, const int values_len,int& ackn)=0;
     virtual void printLBProfiles()=0;
     virtual void printLBProfilesParallel()=0;
     virtual void printLBDensity()=0;
     virtual void printLBDensityParallel()=0;
     virtual void closeLBProfiles()=0;
     virtual void closeLBProfilesParallel()=0;
     virtual void setGradients(const double* gradients, const int gradients_len)=0;
     virtual void setGradientsParallel(const double* gradients, const int gradients_len)=0;
     virtual void setPressure(const double* pressure, const int pressure_len)=0;
     virtual void setPressureParallel(const double* pressure, const int pressure_len)=0;
     virtual void setVelocities(const double* velocitiesX, const int velocitiesX_len,const double* velocitiesY, const int velocitiesY_len,const double* velocitiesZ, const int velocitiesZ_len)=0;
     virtual void setVelocitiesParallel(const double* velocitiesX, const int velocitiesX_len,const double* velocitiesY, const int velocitiesY_len,const double* velocitiesZ, const int velocitiesZ_len)=0;
     virtual void solveOneTimestep()=0;
     virtual void solveOneTimestepParallel()=0;
     virtual void solve()=0;
     virtual void solveParallel()=0;
     virtual void setupCommForNSRegion(const int* startOfRegion, const int startOfRegion_len,const int* endOfRegion, const int endOfRegion_len,const std::string* commids, const int commids_len)=0;
     virtual void setupCommForNSRegionParallel(const int* startOfRegion, const int startOfRegion_len,const int* endOfRegion, const int endOfRegion_len,const std::string* commids, const int commids_len)=0;
     virtual void setup(const std::string inputScenario)=0;
     virtual void setupParallel(const std::string inputScenario)=0;


};

#endif
