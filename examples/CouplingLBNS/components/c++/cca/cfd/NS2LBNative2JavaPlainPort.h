#ifndef CCA_CFD_NS2LB2NATIVE2JAVAPLAINPORT_H_
#define CCA_CFD_NS2LB2NATIVE2JAVAPLAINPORT_H_ 

#include "cca/cfd/NS2LB.h"

#include <iostream>
//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//

#ifdef JAVA
#include <jni.h> 
#ifdef __cplusplus
  extern "C" {
#endif


          
JNIEXPORT void JNICALL Java_cca_cfd_NS2LBNative2JavaPlainPort_createInstance(JNIEnv *env, jobject obj);
JNIEXPORT void JNICALL Java_cca_cfd_NS2LBNative2JavaPlainPort_destroyInstance(JNIEnv *env, jobject obj,jlong ref);

#ifdef __cplusplus
  }
#endif




namespace cca { 
namespace cfd { 
  
     class NS2LBNative2JavaPlainPort;
} 
}

class cca::cfd::NS2LBNative2JavaPlainPort: public cca::cfd::NS2LB{
  private:
    JavaVM* _jvm;
    jobject _obj;
  public:
    NS2LBNative2JavaPlainPort(JavaVM* jvm,jobject obj);
    ~NS2LBNative2JavaPlainPort();
    void iterate();  
    void iterateParallel();
   
    void retrieveTimestep(double& timestep);  
    void retrieveTimestepParallel(double& timestep);
   
    void retrieveVelocitiesSize(int& memory);  
    void retrieveVelocitiesSizeParallel(int& memory);
   
    void retrieveVelocitiesCopy(double* velocityX, const int velocityX_len,double* velocityY, const int velocityY_len,double* velocityZ, const int velocityZ_len);  
    void retrieveVelocitiesCopyParallel(double* velocityX, const int velocityX_len,double* velocityY, const int velocityY_len,double* velocityZ, const int velocityZ_len);
   
    void retrieveJacobianCopy(double* jacobian, const int jacobian_len);  
    void retrieveJacobianCopyParallel(double* jacobian, const int jacobian_len);
   
    void retrievePressureCopy(double* pressure, const int pressure_len);  
    void retrievePressureCopyParallel(double* pressure, const int pressure_len);
   
};
#endif
#endif
