//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package examples.heat;


public abstract class AppDriverAbstractJavaImplementation implements AppDriver {
  /**
   * Semaphore object.
   */
  private boolean  _isLocked;
  
  private String   _instanceName;

  private long _reference;
  public AppDriverAbstractJavaImplementation(String instanceName) {
    assert(instanceName!=null); 
    _instanceName = instanceName;
    
  }
    
  public long getReference(){
    return _reference;
  }  
  
  public void setProjectLocation(String location){
  }
  public void setReference(long reference){
     _reference = reference;
  }
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
    
  }
  

    
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public de.tum.ascodt.repository.Target getTarget() {
    return de.tum.ascodt.repository.Target.createJavaLocalTarget();
  }
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
    return null;
  }

  /**
   * @see de.tum.ascodt.repository.entities
   */
  public String getInstanceName() {
    return _instanceName;
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void setInstanceName(String instanceName){
     _instanceName=instanceName;
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void destroy(){
  
  }
  
  public boolean isValid() {
     return true;
  }


  public boolean hasGUI() {
    // @todo Insert your code here
    return false;
  }
  
  
  public void openGUI() {
    
  }
  
  
  public void closeGUI() {
    
  }

  

  /**
   * Uses port
   */
  protected examples.heat.StencilDispatcher _stencil = new examples.heat.StencilDispatcher();
  
    
  /**
   * @see Case class 
   */
  public void connectstencil(examples.heat.Stencil  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_stencil==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connectstencil(...)", "tried to connect uses port to multiple other ports", null );
    }
    else {
      _stencil.connect(port);
    }
  }
  
  
  /**
   * @see Case class 
   */
  public examples.heat.Stencil createPortForstencil(
     de.tum.ascodt.repository.Target  target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
    examples.heat.Stencil result = null;
        
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaLocal) {
      result = new examples.heat.StencilPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaNative) {
      result = new examples.heat.StencilPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.ReverseFortranRemoteSocket) {
        result = new examples.heat.StencilPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket) {
        result = new examples.heat.StencilPlainJavaPort();
    }
    
    /*if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.StencilJava2CxxRemoteSocketPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.StencilReverseJava2CxxRemoteSocketPort();
    }*/ 
    assert(result!=null);
    
    return result;
  }
  

  /**
   * @see Case class 
   */
  public void disconnectstencil(examples.heat.Stencil  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_stencil==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnectstencil(...)", "tried to disconnect uses port that has not been connected to any other port before", null );
    }
    _stencil.disconnect(port);
  }

  /**
   * Uses port
   */
  protected examples.heat.IntegratorDispatcher _integrator = new examples.heat.IntegratorDispatcher();
  
    
  /**
   * @see Case class 
   */
  public void connectintegrator(examples.heat.Integrator  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_integrator==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connectintegrator(...)", "tried to connect uses port to multiple other ports", null );
    }
    else {
      _integrator.connect(port);
    }
  }
  
  
  /**
   * @see Case class 
   */
  public examples.heat.Integrator createPortForintegrator(
     de.tum.ascodt.repository.Target  target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
    examples.heat.Integrator result = null;
        
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaLocal) {
      result = new examples.heat.IntegratorPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaNative) {
      result = new examples.heat.IntegratorPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.ReverseFortranRemoteSocket) {
        result = new examples.heat.IntegratorPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket) {
        result = new examples.heat.IntegratorPlainJavaPort();
    }
    
    /*if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.IntegratorJava2CxxRemoteSocketPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.IntegratorReverseJava2CxxRemoteSocketPort();
    }*/ 
    assert(result!=null);
    
    return result;
  }
  

  /**
   * @see Case class 
   */
  public void disconnectintegrator(examples.heat.Integrator  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_integrator==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnectintegrator(...)", "tried to disconnect uses port that has not been connected to any other port before", null );
    }
    _integrator.disconnect(port);
  }

  /**
   * Uses port
   */
  protected examples.heat.fMeshDispatcher _mesh = new examples.heat.fMeshDispatcher();
  
    
  /**
   * @see Case class 
   */
  public void connectmesh(examples.heat.fMesh  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_mesh==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connectmesh(...)", "tried to connect uses port to multiple other ports", null );
    }
    else {
      _mesh.connect(port);
    }
  }
  
  
  /**
   * @see Case class 
   */
  public examples.heat.fMesh createPortFormesh(
     de.tum.ascodt.repository.Target  target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
    examples.heat.fMesh result = null;
        
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaLocal) {
      result = new examples.heat.fMeshPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaNative) {
      result = new examples.heat.fMeshPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.ReverseFortranRemoteSocket) {
        result = new examples.heat.fMeshPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket) {
        result = new examples.heat.fMeshPlainJavaPort();
    }
    
    /*if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.fMeshJava2CxxRemoteSocketPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.fMeshReverseJava2CxxRemoteSocketPort();
    }*/ 
    assert(result!=null);
    
    return result;
  }
  

  /**
   * @see Case class 
   */
  public void disconnectmesh(examples.heat.fMesh  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_mesh==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnectmesh(...)", "tried to disconnect uses port that has not been connected to any other port before", null );
    }
    _mesh.disconnect(port);
  }

  /**
   * Uses port
   */
  protected examples.heat.RegularGridDispatcher _vis = new examples.heat.RegularGridDispatcher();
  
    
  /**
   * @see Case class 
   */
  public void connectvis(examples.heat.RegularGrid  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_vis==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connectvis(...)", "tried to connect uses port to multiple other ports", null );
    }
    else {
      _vis.connect(port);
    }
  }
  
  
  /**
   * @see Case class 
   */
  public examples.heat.RegularGrid createPortForvis(
     de.tum.ascodt.repository.Target  target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
    examples.heat.RegularGrid result = null;
        
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaLocal) {
      result = new examples.heat.RegularGridPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.JavaNative) {
      result = new examples.heat.RegularGridPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.ReverseFortranRemoteSocket) {
        result = new examples.heat.RegularGridPlainJavaPort();
    }
    
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket) {
        result = new examples.heat.RegularGridPlainJavaPort();
    }
    
    /*if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.RegularGridJava2CxxRemoteSocketPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.RegularGridReverseJava2CxxRemoteSocketPort();
    }*/ 
    assert(result!=null);
    
    return result;
  }
  

  /**
   * @see Case class 
   */
  public void disconnectvis(examples.heat.RegularGrid  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_vis==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnectvis(...)", "tried to disconnect uses port that has not been connected to any other port before", null );
    }
    _vis.disconnect(port);
  }

}
 


