//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package examples.heat;


public abstract class ImplicitEulerAbstractJavaNativeImplementation implements ImplicitEuler {
  /**
   * Semaphore object.
   */
  private boolean  _isLocked;
  
  private String   _instanceName;
  
  protected long     _ref;
  public void setProjectLocation(String location){
  }

  public ImplicitEulerAbstractJavaNativeImplementation(String instanceName) {
    assert(instanceName!=null); 
    _instanceName = instanceName;
    _isLocked     = false;
   
    System.load("/work_fast/atanasoa/Programme/runtime-HelloSocketFortran/MethodsInvocations/native/libImplicitEuler.so");
    createInstance();
  }
  public long getNativeReference(){
     return _ref;
  }
  
  /**
   * proxy for the native factory method
   */  
  public native  void createInstance();
  
  /**
   * frees the memory of the component
   */
  public native  void destroyInstance(long ref);
 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
   
  }
  

  
    
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public de.tum.ascodt.repository.Target getTarget() {
    return de.tum.ascodt.repository.Target.createCxxNativeTarget();
  }
  
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
    return null;
  }

  /**
   * @see de.tum.ascodt.repository.entities
   */
  public String getInstanceName() {
    return _instanceName;
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void setInstanceName(String instanceName){
     _instanceName=instanceName;
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void destroy(){
     destroyInstance(_ref);
  }
  
  public long getReference(){
    return _ref;
  }
  
  public void setReference(long ref) {
     _ref=ref;
  }

  public void step(final int dims[],final double dt,final double rhs[],final double stencil[],final long dof){
     
     step(_ref,dims,dt,rhs,stencil,dof);
     
  }
  public native void step(long ref,final int dims[],final double dt,final double rhs[],final double stencil[],final long dof);
  

  /**
   * Uses port
   */
  protected examples.heat.SolverNativeDispatcher _solver = null;
  
    
  /**
   * @see Case class 
   */
  public void connectsolver(examples.heat.Solver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
   
    if(_solver==null){
       _solver = new examples.heat.SolverNativeDispatcher();
       connectsolver(_ref,_solver.getReference());
    }
    _solver.connect(port);
   
  }
  
  private native void connectsolver(long ref,long portRef);
  
  /**
   * @see Case class 
   */
  public examples.heat.Solver createPortForsolver(
     de.tum.ascodt.repository.Target  target ,
     de.tum.ascodt.repository.TargetParameters targetParameters
     ) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
    examples.heat.Solver result = null;
        
    if (target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal) {
      result = new examples.heat.SolverNative2JavaPlainPort();
    }
    if (target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative) {
      result = new examples.heat.SolverNative2NativePlainPort();
    }
    if (target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative) {
        result = new examples.heat.SolverNative2JavaPlainPort();
    }
  
    /*if (target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket) {
      result = new examples.heat.SolverNative2SocketClientPlainPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket){
      result = new examples.heat.SolverCxx2CxxRemoteSocketPort();
    }
    if (target.getType() == de.tum.ascodt.repository.Target.TargetType.ReverseCxxRemoteSocket){
      result = new examples.heat.SolverReverseCxx2CxxRemoteSocketPort();
    }*/  
    assert(result!=null);
    
    return result;
  }
  

  /**
   * @see Case class 
   */
  public void disconnectsolver(examples.heat.Solver  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(_isLocked);
    assert(port!=null);
    if (_solver==null ) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnectsolver(...)", "tried to disconnect uses port that has not been connected to any other port before", null );
    }
    
    _solver.disconnect(port);
    
    if(!_solver.isConnected()){
      disconnectsolver(_ref);
      _solver.destroy();
      _solver = null;
    }
  }
  
  
   private native void disconnectsolver(long ref);

}
 


