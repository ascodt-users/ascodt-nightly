//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package examples.heat;
import vtk.*;
public class VisualiserVTKPipeline extends de.tum.ascodt.plugin.vtk.VTKPipeline {

	private vtkStructuredGrid grid;
	private vtkDataSetMapper mapper;
	private vtkActor actor;
	private double[]offset;
	private double[]domain;

	private int[]resolution;
	private double [] range;
	/**
	 * here you need to instantiate your own pipeline
	 * use _tabFolderPage as parent
	 */
	private vtkWarpScalar warp;
	private vtkStructuredGridGeometryFilter plane;
	@Override
	protected vtk.vtkProp createPipeline() {
		grid=new vtkStructuredGrid();
		warp = new vtkWarpScalar();
		vtkCellDataToPointData celltoPoint =	new vtk.vtkCellDataToPointData();
		celltoPoint.SetInputConnection(grid.GetProducerPort());
		warp.SetInputConnection(celltoPoint.GetOutputPort());
		warp.SetNormal(0, 0, 1);
		warp.UseNormalOn();
		warp.SetScaleFactor(1);
		
		//warp.ReleaseDataFlagOn();
		mapper=new vtkDataSetMapper();
		mapper.SetInput(warp.GetOutput());
		
		actor=new vtkActor();
		actor.SetMapper(mapper);
		range =new double[2];
		return actor;
	}
	void setScalars(double[]array){

		vtkDoubleArray data=new vtkDoubleArray();
		data.SetNumberOfComponents(1);

		data.SetNumberOfTuples(array.length);
		for(int i=0;i<array.length;i++)
			data.SetTuple1(i,array[i]);
		
		data.GetRange(range);
		grid.GetCellData().SetScalars(data);
		warp.Update();
		mapper.SetScalarRange(range);
		data.Delete();
		

	}
	public void update(){

		int []dim=new int[3];
		dim[0]=(int)resolution[0]+1;
		dim[1]=(int)resolution[1]+1;
		dim[2]=(int)resolution[2]+1;
		grid.SetDimensions(dim);
		//create the points
		vtkPoints points = new vtkPoints();
		double spacing[]=new double[3];
		spacing[0]=domain[0]/(dim[0]-1);
		spacing[1]=domain[1]/(dim[1]-1);
		spacing[2]=(dim[2]==1)?0:domain[2]/(dim[2]-1);
		for(int k=0;k<dim[2];k++)
			for(int j=0;j<dim[1];j++)
				for(int i=0;i<dim[0];i++)
					points.InsertPoint(k*((dim[0])*(dim[1]))+j*(dim[0])+i,offset[0]+((double)i*spacing[0]),
							offset[1]+((double)j*spacing[1]),
							offset[2]+((double)k*spacing[2]));
		
		grid.SetPoints(points);
		
		points.Delete();
	}
	public void setOffset(final double[] offset) {
		this.offset=offset;

	}

	public void setDomain(final double[] domain) {
		this.domain=domain;
	}

	public void setDimensions(final int[] dimensions) {
		this.resolution=dimensions;

	}

	@Override
	public void OnPickEvent(double[] arg0) {
		// TODO Auto-generated method stub

	}
}
