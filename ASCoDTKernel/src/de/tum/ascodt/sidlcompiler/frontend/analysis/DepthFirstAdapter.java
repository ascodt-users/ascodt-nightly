/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.ascodt.sidlcompiler.frontend.analysis;

import java.util.*;
import de.tum.ascodt.sidlcompiler.frontend.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPDeclaration().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADeclaration(ADeclaration node)
    {
        defaultIn(node);
    }

    public void outADeclaration(ADeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaration(ADeclaration node)
    {
        inADeclaration(node);
        {
            List<PPackage> copy = new ArrayList<PPackage>(node.getPackage());
            for(PPackage e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaration(node);
    }

    public void inAPackage(APackage node)
    {
        defaultIn(node);
    }

    public void outAPackage(APackage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackage(APackage node)
    {
        inAPackage(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PPackageElement> copy = new ArrayList<PPackageElement>(node.getPackageElement());
            for(PPackageElement e : copy)
            {
                e.apply(this);
            }
        }
        outAPackage(node);
    }

    public void inASubpackagePackageElement(ASubpackagePackageElement node)
    {
        defaultIn(node);
    }

    public void outASubpackagePackageElement(ASubpackagePackageElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubpackagePackageElement(ASubpackagePackageElement node)
    {
        inASubpackagePackageElement(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        outASubpackagePackageElement(node);
    }

    public void inAClassPackageElement(AClassPackageElement node)
    {
        defaultIn(node);
    }

    public void outAClassPackageElement(AClassPackageElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassPackageElement(AClassPackageElement node)
    {
        inAClassPackageElement(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PUserDefinedType> copy = new ArrayList<PUserDefinedType>(node.getProvides());
            for(PUserDefinedType e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PUses> copy = new ArrayList<PUses>(node.getUses());
            for(PUses e : copy)
            {
                e.apply(this);
            }
        }
        outAClassPackageElement(node);
    }

    public void inAInterfacePackageElement(AInterfacePackageElement node)
    {
        defaultIn(node);
    }

    public void outAInterfacePackageElement(AInterfacePackageElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfacePackageElement(AInterfacePackageElement node)
    {
        inAInterfacePackageElement(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PUserDefinedType> copy = new ArrayList<PUserDefinedType>(node.getSupertype());
            for(PUserDefinedType e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POperation> copy = new ArrayList<POperation>(node.getOperation());
            for(POperation e : copy)
            {
                e.apply(this);
            }
        }
        outAInterfacePackageElement(node);
    }

    public void inAEnumDeclarationPackageElement(AEnumDeclarationPackageElement node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclarationPackageElement(AEnumDeclarationPackageElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDeclarationPackageElement(AEnumDeclarationPackageElement node)
    {
        inAEnumDeclarationPackageElement(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PEnumerator> copy = new ArrayList<PEnumerator>(node.getEnumerator());
            for(PEnumerator e : copy)
            {
                e.apply(this);
            }
        }
        outAEnumDeclarationPackageElement(node);
    }

    public void inAUses(AUses node)
    {
        defaultIn(node);
    }

    public void outAUses(AUses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUses(AUses node)
    {
        inAUses(node);
        {
            List<PUserDefinedType> copy = new ArrayList<PUserDefinedType>(node.getType());
            for(PUserDefinedType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        outAUses(node);
    }

    public void inAUserDefinedType(AUserDefinedType node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedType(AUserDefinedType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedType(AUserDefinedType node)
    {
        inAUserDefinedType(node);
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getIdentifier());
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAUserDefinedType(node);
    }

    public void inAIntBuiltInType(AIntBuiltInType node)
    {
        defaultIn(node);
    }

    public void outAIntBuiltInType(AIntBuiltInType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntBuiltInType(AIntBuiltInType node)
    {
        inAIntBuiltInType(node);
        outAIntBuiltInType(node);
    }

    public void inADoubleBuiltInType(ADoubleBuiltInType node)
    {
        defaultIn(node);
    }

    public void outADoubleBuiltInType(ADoubleBuiltInType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleBuiltInType(ADoubleBuiltInType node)
    {
        inADoubleBuiltInType(node);
        outADoubleBuiltInType(node);
    }

    public void inABoolBuiltInType(ABoolBuiltInType node)
    {
        defaultIn(node);
    }

    public void outABoolBuiltInType(ABoolBuiltInType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolBuiltInType(ABoolBuiltInType node)
    {
        inABoolBuiltInType(node);
        outABoolBuiltInType(node);
    }

    public void inAOpaqueBuiltInType(AOpaqueBuiltInType node)
    {
        defaultIn(node);
    }

    public void outAOpaqueBuiltInType(AOpaqueBuiltInType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpaqueBuiltInType(AOpaqueBuiltInType node)
    {
        inAOpaqueBuiltInType(node);
        outAOpaqueBuiltInType(node);
    }

    public void inAStringBuiltInType(AStringBuiltInType node)
    {
        defaultIn(node);
    }

    public void outAStringBuiltInType(AStringBuiltInType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringBuiltInType(AStringBuiltInType node)
    {
        inAStringBuiltInType(node);
        outAStringBuiltInType(node);
    }

    public void inAOperation(AOperation node)
    {
        defaultIn(node);
    }

    public void outAOperation(AOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperation(AOperation node)
    {
        inAOperation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAOperation(node);
    }

    public void inAParameterInParameter(AParameterInParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterInParameter(AParameterInParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterInParameter(AParameterInParameter node)
    {
        inAParameterInParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterInParameter(node);
    }

    public void inAParameterArrayInParameter(AParameterArrayInParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterArrayInParameter(AParameterArrayInParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterArrayInParameter(AParameterArrayInParameter node)
    {
        inAParameterArrayInParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterArrayInParameter(node);
    }

    public void inAParameterOutParameter(AParameterOutParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterOutParameter(AParameterOutParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterOutParameter(AParameterOutParameter node)
    {
        inAParameterOutParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterOutParameter(node);
    }

    public void inAParameterArrayOutParameter(AParameterArrayOutParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterArrayOutParameter(AParameterArrayOutParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterArrayOutParameter(AParameterArrayOutParameter node)
    {
        inAParameterArrayOutParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterArrayOutParameter(node);
    }

    public void inAParameterInEnumParameter(AParameterInEnumParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterInEnumParameter(AParameterInEnumParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterInEnumParameter(AParameterInEnumParameter node)
    {
        inAParameterInEnumParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterInEnumParameter(node);
    }

    public void inAParameterOutEnumParameter(AParameterOutEnumParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterOutEnumParameter(AParameterOutEnumParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterOutEnumParameter(AParameterOutEnumParameter node)
    {
        inAParameterOutEnumParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterOutEnumParameter(node);
    }

    public void inAParameterArrayOutEnumParameter(AParameterArrayOutEnumParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterArrayOutEnumParameter(AParameterArrayOutEnumParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterArrayOutEnumParameter(AParameterArrayOutEnumParameter node)
    {
        inAParameterArrayOutEnumParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterArrayOutEnumParameter(node);
    }

    public void inAParameterArrayInEnumParameter(AParameterArrayInEnumParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterArrayInEnumParameter(AParameterArrayInEnumParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterArrayInEnumParameter(AParameterArrayInEnumParameter node)
    {
        inAParameterArrayInEnumParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterArrayInEnumParameter(node);
    }

    public void inAAutoEnumeratorEnumerator(AAutoEnumeratorEnumerator node)
    {
        defaultIn(node);
    }

    public void outAAutoEnumeratorEnumerator(AAutoEnumeratorEnumerator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAutoEnumeratorEnumerator(AAutoEnumeratorEnumerator node)
    {
        inAAutoEnumeratorEnumerator(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAutoEnumeratorEnumerator(node);
    }

    public void inASpecificEnumeratorEnumerator(ASpecificEnumeratorEnumerator node)
    {
        defaultIn(node);
    }

    public void outASpecificEnumeratorEnumerator(ASpecificEnumeratorEnumerator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecificEnumeratorEnumerator(ASpecificEnumeratorEnumerator node)
    {
        inASpecificEnumeratorEnumerator(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outASpecificEnumeratorEnumerator(node);
    }
}
