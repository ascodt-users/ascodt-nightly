/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.ascodt.sidlcompiler.frontend.node;


import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import de.tum.ascodt.sidlcompiler.frontend.analysis.Analysis;


@SuppressWarnings("nls")
public final class AInterfacePackageElement extends PPackageElement {
  private TIdentifier _name_;
  private final LinkedList<PUserDefinedType> _supertype_ = new LinkedList<PUserDefinedType>();
  private final LinkedList<POperation> _operation_ = new LinkedList<POperation>();

  public AInterfacePackageElement() {
    // Constructor
  }

  public AInterfacePackageElement(
      @SuppressWarnings("hiding") TIdentifier _name_,
      @SuppressWarnings("hiding") List<PUserDefinedType> _supertype_,
      @SuppressWarnings("hiding") List<POperation> _operation_) {
    // Constructor
    setName(_name_);

    setSupertype(_supertype_);

    setOperation(_operation_);

  }

  @Override
  public void apply(Switch sw) {
    ((Analysis)sw).caseAInterfacePackageElement(this);
  }

  @Override
  public Object clone() {
    return new AInterfacePackageElement(cloneNode(_name_),
        cloneList(_supertype_), cloneList(_operation_));
  }

  public TIdentifier getName() {
    return _name_;
  }

  public LinkedList<POperation> getOperation() {
    return _operation_;
  }

  public LinkedList<PUserDefinedType> getSupertype() {
    return _supertype_;
  }

  @Override
  void removeChild(@SuppressWarnings("unused") Node child) {
    // Remove child
    if (_name_ == child) {
      _name_ = null;
      return;
    }

    if (_supertype_.remove(child)) {
      return;
    }

    if (_operation_.remove(child)) {
      return;
    }

    throw new RuntimeException("Not a child.");
  }

  @Override
  void replaceChild(@SuppressWarnings("unused") Node oldChild,
      @SuppressWarnings("unused") Node newChild) {
    // Replace child
    if (_name_ == oldChild) {
      setName((TIdentifier)newChild);
      return;
    }

    for (ListIterator<PUserDefinedType> i = _supertype_.listIterator(); i
        .hasNext();) {
      if (i.next() == oldChild) {
        if (newChild != null) {
          i.set((PUserDefinedType)newChild);
          newChild.parent(this);
          oldChild.parent(null);
          return;
        }

        i.remove();
        oldChild.parent(null);
        return;
      }
    }

    for (ListIterator<POperation> i = _operation_.listIterator(); i.hasNext();) {
      if (i.next() == oldChild) {
        if (newChild != null) {
          i.set((POperation)newChild);
          newChild.parent(this);
          oldChild.parent(null);
          return;
        }

        i.remove();
        oldChild.parent(null);
        return;
      }
    }

    throw new RuntimeException("Not a child.");
  }

  public void setName(TIdentifier node) {
    if (_name_ != null) {
      _name_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _name_ = node;
  }

  public void setOperation(List<POperation> list) {
    _operation_.clear();
    _operation_.addAll(list);
    for (POperation e : list) {
      if (e.parent() != null) {
        e.parent().removeChild(e);
      }

      e.parent(this);
    }
  }

  public void setSupertype(List<PUserDefinedType> list) {
    _supertype_.clear();
    _supertype_.addAll(list);
    for (PUserDefinedType e : list) {
      if (e.parent() != null) {
        e.parent().removeChild(e);
      }

      e.parent(this);
    }
  }

  @Override
  public String toString() {
    return "" + toString(_name_) + toString(_supertype_) +
        toString(_operation_);
  }
}
