/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tum.ascodt.sidlcompiler.frontend.node;

import java.util.*;
import de.tum.ascodt.sidlcompiler.frontend.analysis.*;

@SuppressWarnings("nls")
public final class APackage extends PPackage
{
    private TIdentifier _name_;
    private final LinkedList<PPackageElement> _packageElement_ = new LinkedList<PPackageElement>();

    public APackage()
    {
        // Constructor
    }

    public APackage(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") List<PPackageElement> _packageElement_)
    {
        // Constructor
        setName(_name_);

        setPackageElement(_packageElement_);

    }

    @Override
    public Object clone()
    {
        return new APackage(
            cloneNode(this._name_),
            cloneList(this._packageElement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPackage(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PPackageElement> getPackageElement()
    {
        return this._packageElement_;
    }

    public void setPackageElement(List<PPackageElement> list)
    {
        this._packageElement_.clear();
        this._packageElement_.addAll(list);
        for(PPackageElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._packageElement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._packageElement_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PPackageElement> i = this._packageElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPackageElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
