#ifndef __INCLUDE_GUARD_FULL_QUALIFIED_NAME__NATIVEDISPATCHER_H_
#define __INCLUDE_GUARD_FULL_QUALIFIED_NAME__NATIVEDISPATCHER_H_ 

#include "__PATH_FULL_QUALIFIED_NAME__.h"
#include <iostream>
#include <vector>

__OPEN_PACKAGE__
     class __PORT_NAME__NativeDispatcher;
__CLOSE_PACKAGE__

#include <jni.h> 

#ifdef __cplusplus
  extern "C" {
#endif


          
JNIEXPORT void JNICALL Java___JNI_FULL_QUALIFIED_NAME__NativeDispatcher_createInstance(JNIEnv *env, jobject obj);
JNIEXPORT void JNICALL Java___JNI_FULL_QUALIFIED_NAME__NativeDispatcher_destroyInstance(JNIEnv *env, jobject obj,jlong ref);
JNIEXPORT void JNICALL Java___JNI_FULL_QUALIFIED_NAME__NativeDispatcher_connect(JNIEnv *env, jobject obj,jlong ref,jlong port);
JNIEXPORT void JNICALL Java___JNI_FULL_QUALIFIED_NAME__NativeDispatcher_disconnect(JNIEnv *env, jobject obj,jlong ref,jlong port);


#ifdef __cplusplus
  }
#endif

class __FULL_QUALIFIED_NAME__NativeDispatcher: public __FULL_QUALIFIED_NAME__{
  protected:
    std::vector<__FULL_QUALIFIED_NAME__*> _destinations;
  public:
    __PORT_NAME__NativeDispatcher();
    virtual ~__PORT_NAME__NativeDispatcher();
    
    void connect(__FULL_QUALIFIED_NAME__* ref);
    void disconnect(__FULL_QUALIFIED_NAME__* ref);
    bool isConnected() const;
    -- INSERT HERE --
};

#endif