//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
__OPEN_PACKAGE__;
public class SocketComponent 
     implements java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>,
     __SOCKET_COMPONENT__{
     
     protected String _host;
     protected int _port;
     protected java.nio.channels.AsynchronousSocketChannel _channel; 
     protected java.nio.channels.AsynchronousServerSocketChannel _server; 
     protected int _bufferSize;
     protected  java.nio.channels.AsynchronousChannelGroup _group;
     protected boolean _isServer;
     
     /**
      * default constructor
      */
     protected SocketComponent(){
         this(1024); 
     }
     
     protected SocketComponent(String host){
         this(host,1024); 
     }
     
     public int getPort(){
          return _port;
     }
     
     public String getHost(){
          return _host;
     }
     
     /**
      * server constructor
      */
     protected SocketComponent(int bufferSize){
          _host="localhost";
          _port=__SOCKET_SERVICE__.getDefault().getFreePort();
          _bufferSize=bufferSize;
          try {
               _group = java.nio.channels.AsynchronousChannelGroup.withThreadPool(java.util.concurrent.Executors.newSingleThreadExecutor());
               _isServer=true;
          } catch (java.io.IOException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
          }
     }
     
     protected SocketComponent(String host,int bufferSize){

           _host = host;
           _port = de.tum.ascodt.plugin.services.SocketService.getDefault().getFreePort();
           _bufferSize = bufferSize;
           try {
               _group = java.nio.channels.AsynchronousChannelGroup.withThreadPool(java.util.concurrent.Executors.newSingleThreadExecutor());
                _isServer=false;
          } catch (java.io.IOException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
          }          
          
      } 
     
     public void open(){
      
          try {
                if(_isServer){
                     System.out.println("open new server:"+_port);
                     _server=java.nio.channels.AsynchronousServerSocketChannel.open(_group).bind(
                          new java.net.InetSocketAddress(_port));
                    try {
                         completed(_server.accept().get(),null);
                    } catch (java.util.concurrent.ExecutionException e) {
                         e.printStackTrace();
                                  
                    }
                }else{
                
                     System.out.println("open new client:"+_host+","+_port);
                       boolean initialized=false;
                   java.nio.channels.AsynchronousSocketChannel channel=null;
                     while(!initialized){
                          
                          try {
                             
                     channel= java.nio.channels.AsynchronousSocketChannel.open();
                                   channel.connect(new java.net.InetSocketAddress(_host,_port)).get();
                                   
                              } catch (java.util.concurrent.ExecutionException e) {
                                   System.out.println("trying client connection:"+_host+","+_port);
                                   Thread.sleep(1000);
                                   continue;
                              }
                          initialized=true;
                     }
                     completed(channel,null);
                }
          }catch(java.nio.channels.ShutdownChannelGroupException se){
               System.out.println("accept break");
          } catch (java.io.IOException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
          } catch (java.lang.InterruptedException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
          }
 
     }
     
     public boolean isServer(){
          return _isServer;
     }
     @Override
     public void completed(java.nio.channels.AsynchronousSocketChannel result, Object attachment) {
          synchronized(this){
               _channel=result;
          }
          
     }

     public synchronized boolean isConnected(){
          return _channel!=null;
     }
     
    
     @Override
     public void failed(Throwable exc, Object attachment) {
          //de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().showError(fullQualifiedClassName, methodName, message) 
     }
 
     protected void sendIntData(int data) throws java.io.IOException {
          
          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
          buffer.asIntBuffer().put(data);
          _channel.write(buffer);
     }

     protected void sendIntData(int []data) throws java.io.IOException{
          
         int bufferSize= (int) Math.ceil(((double)data.length*4.0)/1024.0)*1024;
         java.nio.ByteBuffer buffer= java.nio.ByteBuffer.allocateDirect(bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         buffer.asIntBuffer().put(data);
         int offset=0;
          while(offset*1024<bufferSize){
            byte []buf=new byte[1024];
            java.nio.ByteBuffer sendBuf=java.nio.ByteBuffer.wrap(buf).order(java.nio.ByteOrder.LITTLE_ENDIAN);
              buffer.get(buf);
             
            _channel.write(sendBuf);
            offset++;
          }
     }
     
     protected void sendDoubleData(double data) throws java.io.IOException{
          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
          buffer.asDoubleBuffer().put(data);
          _channel.write(buffer);
     }
     
     protected void sendDoubleData(double []data) throws java.io.IOException{
         int bufferSize= (int) Math.ceil(((double)data.length*8.0)/1024.0)*1024;
         java.nio.ByteBuffer buffer= java.nio.ByteBuffer.allocateDirect(bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         buffer.asDoubleBuffer().put(data);
         int offset=0;
          while(offset*1024<bufferSize){
            byte []buf=new byte[1024];
            java.nio.ByteBuffer sendBuf=java.nio.ByteBuffer.wrap(buf).order(java.nio.ByteOrder.LITTLE_ENDIAN);
              buffer.get(buf);
             
            _channel.write(sendBuf);
            offset++;
         }
     }
     
     protected void sendBooleanData(boolean data) throws java.io.IOException{
          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocate(_bufferSize);
          buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN);
          buffer.putInt(data?1:0);
          _channel.write(buffer);
     }

     protected void sendBooleanData(boolean[] data) throws java.io.IOException{
          int bytes2Copy=data.length*4;
          int copiedBytes=0;
          int offset=0;
          int[] convertedData=new int[data.length];
          for(int i=0;i<data.length;i++)
               convertedData[i]=data[i]?1:0;
          while(copiedBytes<bytes2Copy){
               java.nio.ByteBuffer buffer =java.nio.ByteBuffer.allocate(_bufferSize);
               buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN);
               if(bytes2Copy-copiedBytes>_bufferSize){
                    buffer.asIntBuffer().put(convertedData,offset,_bufferSize/4);
                    offset+=_bufferSize/4;
               }else{
                    buffer.asIntBuffer().put(convertedData,offset,(bytes2Copy-copiedBytes)/4);
               }
               _channel.write(buffer);
          }
     }

     protected void sendStringData(String data) throws java.io.IOException {
          java.nio.ByteBuffer strBuf=java.nio.charset.Charset.forName("UTF-8").encode(data);
          int bufferSize= (int) Math.ceil(((double)strBuf.capacity())/1024.0)*1024;
          java.nio.ByteBuffer buffer= java.nio.ByteBuffer.allocateDirect(bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
          buffer.put(strBuf);   
          sendIntData(strBuf.capacity());
          buffer.rewind();
          _channel.write(buffer);
     }
     
     protected void sendStringData(String [] data) throws java.io.IOException {
         for(int i=0;i<data.length;i++){
           sendStringData(data[i]);
         }
     }

     protected int readIntData() throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{

         java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         _channel.read(buffer).get();
         buffer.flip();
         
         
         return buffer.getInt();
     }


     protected void readIntData(int[] result,int size) throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
          int readBytes=0;
          int bytesToRead=size*4;
          java.nio.ByteBuffer resultBuffer=java.nio.ByteBuffer.allocateDirect(bytesToRead).order(java.nio.ByteOrder.LITTLE_ENDIAN);;
          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
          while(readBytes<bytesToRead){
               _channel.read(buffer).get();
               readBytes+=_bufferSize;
                buffer.flip();
               if(readBytes>bytesToRead){
                  byte[] bt=new byte[bytesToRead-readBytes+_bufferSize]; 
                  buffer.get(bt);
                  resultBuffer.put(bt);
               }else{
                  byte[] bt=new byte[_bufferSize];
                  buffer.get(bt);
                  resultBuffer.put(bt);
               }
          }
          resultBuffer.flip();
          resultBuffer.asIntBuffer().get(result);
     }

     protected double readDoubleData() throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{

          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocate(_bufferSize);
          buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN);
          _channel.read(buffer).get();
          double data=buffer.getDouble();
          return data;
     }


     protected void readDoubleData(double [] result,int size) throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
         int readBytes=0;
         int bytesToRead=size*8;
         java.nio.ByteBuffer resultBuffer=java.nio.ByteBuffer.allocateDirect(bytesToRead).order(java.nio.ByteOrder.LITTLE_ENDIAN);;
         java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         while(readBytes<bytesToRead){
              _channel.read(buffer).get();
              readBytes+=_bufferSize;
               buffer.flip();
              if(readBytes>bytesToRead){
                 byte[] bt=new byte[bytesToRead-readBytes+_bufferSize]; 
                 buffer.get(bt);
                 resultBuffer.put(bt);
              }else{
                 byte[] bt=new byte[_bufferSize];
                 buffer.get(bt);
                 resultBuffer.put(bt);
              }
         }
         resultBuffer.flip();
         resultBuffer.asDoubleBuffer().get(result);
     }

     protected boolean readBooleanData() throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
          
          java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
          _channel.read(buffer).get();
          buffer.flip();
          boolean data=buffer.getInt()==1?true:false;
          return data;
     }


     protected void readBooleanData(boolean[] result,int size) throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
         int readBytes=0;
         int bytesToRead=size*4;
         java.nio.ByteBuffer resultBuffer=java.nio.ByteBuffer.allocateDirect(bytesToRead).order(java.nio.ByteOrder.LITTLE_ENDIAN);;
         java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         int []result_i=new int[size];
         while(readBytes<bytesToRead){
              _channel.read(buffer).get();
              readBytes+=_bufferSize;
               buffer.flip();
              if(readBytes>bytesToRead){
                 byte[] bt=new byte[bytesToRead-readBytes+_bufferSize]; 
                 buffer.get(bt);
                 resultBuffer.put(bt);
              }else{
                 byte[] bt=new byte[_bufferSize];
                 buffer.get(bt);
                 resultBuffer.put(bt);
              }
         }
         resultBuffer.flip();
         resultBuffer.asIntBuffer().get(result_i);
          for(int i=0;i<size;i++)
            result[i]=result_i[i]==1?true:false;
     }

     protected void sendLongData(long data) throws java.io.IOException{
       java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
       buffer.asLongBuffer().put(data);
       _channel.write(buffer);
     }
     
     protected long readLongData() throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
         java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(_bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         int bytes=_channel.read(buffer).get();
          buffer.flip();
         
         
         return buffer.getLong();
     }
     
     protected String readStringData() throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
         String res="";
         int stringSize=readIntData();
         int bufferSize= (int) Math.ceil(((double)stringSize)/1024.0)*1024;
         java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocateDirect(bufferSize).order(java.nio.ByteOrder.LITTLE_ENDIAN);
         _channel.read(buffer).get();
         byte[] strBytes=new byte[stringSize];
         buffer.flip();
         buffer.get(strBytes);
         res=new String(strBytes,java.nio.charset.Charset.forName("UTF-8"));
         return res;
     }
     
     void readStringData(String[]data,int size) throws java.io.IOException, java.lang.InterruptedException,java.util.concurrent.ExecutionException{
        for(int i=0;i<size;i++){
          data[i]=readStringData();
        }
     }
     
     public void close(){
          try {
               
               if(_channel!=null){

                    _channel.close();
                    _channel=null;
                    
                    System.out.println("destroying channel");
               }
               
               if(_server!=null){
                    System.out.println("destroying server");
                    _server.close();
                    _server=null;
               }
               _group.shutdownNow();
          } catch (java.io.IOException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
          }
     }
     
     
}  
__CLOSE_PACKAGE__