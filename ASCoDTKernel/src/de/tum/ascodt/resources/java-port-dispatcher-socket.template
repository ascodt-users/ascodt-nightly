//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
__OPEN_PACKAGE__;


public class __PORT_NAME__SocketDispatcher extends  SocketComponent {
  private long _ref;
  protected java.util.HashSet<__PORT_NAME__>  _destinations;
  
  public __PORT_NAME__SocketDispatcher(){
    _destinations = new java.util.HashSet<__PORT_NAME__>();
  
  }
  
  public long getReference(){
    return _ref;
  }
  
  
  public void setReference(long ref){
     _ref=ref;
  }
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance(){
     int methodId=0;
     try{
          sendIntData(methodId);
          _ref=readLongData();
     }catch(java.io.IOException ioe){
     } catch (java.lang.InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     } catch (java.util.concurrent.ExecutionException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     }
  } 
  
  protected void finalize(){
    destroyInstance();
    super.close();
  }
  
  public void destroyInstance(){
     int methodId=1;
     try{
          sendIntData(methodId);
          sendLongData(_ref);
          
     }catch(java.io.IOException ioe){
          
     } 
  }
  
  /**
   * Connect a uses port.
   *
   * @throw If already connected to another port.
   * @see Operation with name of any implementing component 
   */
  public void connect(__PORT_NAME__  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    connect(port.getReference());
     if (_destinations==null) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "connect(...)", "port already was connected", null );
    }
    _destinations.add(port);
  }
  
  public void connect(long portRef){
      int method=0;
      try{
          sendIntData(method);
          sendLongData(portRef);
      }catch(java.io.IOException ie){
      }
  }
  
  public void disconnect(__PORT_NAME__  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    disconnect(port.getReference());
    //((SocketComponent) port).close();
    if (_destinations==null) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnect(...)", "tried to disconnect port that was not connected before", null );
    }
     
    if (!_destinations.contains(port)) {
      throw new de.tum.ascodt.utils.exceptions.ASCoDTException( getClass().getName(), "disconnect(...)", "tried to disconnect port from port that was not connected before", null );
    }
    _destinations.remove(port);
  }
  
  public void disconnect(long portRef){
     int method=1;
     try{
          sendIntData(method);
          sendLongData(portRef);
     }catch(java.io.IOException ie){
     }
  }
  
  public boolean isConnected(){
     return !_destinations.isEmpty();
  }
  
}
