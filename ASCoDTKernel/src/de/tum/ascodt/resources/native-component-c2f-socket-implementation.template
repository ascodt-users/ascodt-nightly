//#include "__PATH_FULL_QUALIFIED_NAME__JNIProxy.h"
#ifdef _WIN32
	#include <winsock2.h>
	#include <ws2tcpip.h>
	
	#define bzero(b,len) (memset((b), '\0', (len)), (void) 0)  
	#define bcopy(b1,b2,len) (memmove((b2), (b1), (len)), (void) 0)
	#pragma comment(lib, "Ws2_32.lib")
#else
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>
	#include <unistd.h>
	#include <arpa/inet.h>
#endif

#include <stdio.h>
#include <assert.h>
#include <algorithm>
#include <iostream>
#include <string.h>
#include <stdlib.h>
	
extern "C" {
 
 	 #ifdef _WIN32
 	 void __COMPONENT_NAME___fproxy_createinstance(void** self);
     void __COMPONENT_NAME___fproxy_destroyinstance(void** &self);
     #else
     void __COMPONENT_NAME___fproxy_createinstance_(void** self);
     void __COMPONENT_NAME___fproxy_destroyinstance_(void** &self);
     #endif
} 

void open_client(const char* hostname,const char* port,
#ifdef _WIN32
SOCKET
#else
int
#endif  
&sockfd,
#ifdef _WIN32
SOCKET
#else
int
#endif  
&newsockfd){
#ifdef _WIN32
		 WSADATA wsaData;
		 int iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
	     assert (iResult == 0);
#endif
          struct addrinfo *result = NULL,
     	                   hints;
          bzero( &hints, sizeof(hints) );
          hints.ai_family = AF_UNSPEC;
          hints.ai_socktype = SOCK_STREAM;
          hints.ai_protocol = IPPROTO_TCP;
          getaddrinfo(hostname, port, &hints, &result);
          sockfd = socket(result->ai_family, result->ai_socktype, 
            result->ai_protocol);
          assert(sockfd >= 0);
          
          int tries=60;
                while(tries>0){
                 if (connect(sockfd, result->ai_addr, (int)result->ai_addrlen)==0)
                    break;
                         tries--;
#ifdef _WIN32
						 Sleep(1000);
#else
						 sleep(1);
#endif	
                }   
         newsockfd=sockfd;
}

void open_server(const char* port,
#ifdef _WIN32
SOCKET
#else
int
#endif 
&sockfd,
#ifdef _WIN32
SOCKET
#else
int
#endif
&newsockfd
){


#ifdef _WIN32
		 WSADATA wsaData;
		 int iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
	     assert (iResult == 0);
#endif
          struct addrinfo hints;
	      struct addrinfo *result = NULL;
         

          bzero(&hints, sizeof(hints));
          hints.ai_family = AF_INET;
          hints.ai_socktype = SOCK_STREAM;
		  hints.ai_protocol = IPPROTO_TCP;
		  hints.ai_flags = AI_PASSIVE;
          getaddrinfo(NULL, port, &hints, &result);
		  
		  sockfd = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
          assert (sockfd>=0);
          bind(sockfd, result->ai_addr, (int)result->ai_addrlen);
		  
          listen(sockfd,5);
         
          newsockfd = accept(sockfd,
                    NULL,
                    NULL);
          assert (newsockfd >= 0);
}

void sendData(char* data, size_t numberOfBytes, char* sendBuffer,
#ifdef _WIN32
SOCKET
#else
int
#endif 
newsockfd,int bufferSize){
     char* data_ptr=(char*)data;
     int remaining_bytes_to_send=0,total_send_bytes=0,send_bytes=0,n=0;

     //clear buffer
     bzero(sendBuffer,bufferSize);
     while(total_send_bytes<numberOfBytes){
          remaining_bytes_to_send=(numberOfBytes-send_bytes<=bufferSize)?numberOfBytes-send_bytes:bufferSize;
          memcpy(sendBuffer,data_ptr,remaining_bytes_to_send);
          send_bytes=0;
          char* send_buffer_ptr=sendBuffer;
          while(send_bytes<bufferSize){
               n = 
#ifdef _WIN32
				   send(
#else

				   write(
#endif
				   newsockfd,send_buffer_ptr,bufferSize-send_bytes
#ifdef _WIN32
				   ,0
#else

#endif
				   );
               if(n>0){
                    send_bytes+=n;
                    send_buffer_ptr+=n;
               }
          }
          total_send_bytes+=send_bytes;
          data_ptr+=send_bytes;
     }

}


void readData(char* data,size_t size_of_data,char* readBuffer,
#ifdef _WIN32
SOCKET
#else
int
#endif 
newsockfd, int bufferSize){
          bzero(readBuffer,bufferSize);
          int bytes_received=0;
          int total_bytes_received=0;
          int local_bytes_received=0;
          int bytes_to_copy=0;
          char* data_ptr=data;
          char* buffer_ptr;

          while(total_bytes_received<size_of_data){
               bytes_received=0;
               buffer_ptr=readBuffer;
               while(bytes_received<bufferSize){
                    local_bytes_received = 
#ifdef _WIN32
						recv(
#else
						read(
#endif
							newsockfd,buffer_ptr,bufferSize-bytes_received
#ifdef _WIN32
							,0
#else
#endif
							);
                    if(local_bytes_received>0){
                         bytes_received+=local_bytes_received;
                         buffer_ptr+=local_bytes_received;
                    }
               }
               bytes_to_copy=(total_bytes_received+bytes_received>size_of_data)?size_of_data-total_bytes_received:bytes_received;
               memcpy(data_ptr,readBuffer,bytes_to_copy);
               data_ptr+=bytes_to_copy;
               total_bytes_received+=bytes_to_copy;
          }

}

void invoker_create_instance(void** ref,int,int,int,char*,char*){
     #ifdef _WIN32
     __COMPONENT_NAME___fproxy_createinstance(ref);
     #else
     
     __COMPONENT_NAME___fproxy_createinstance_(ref);
  	 #endif
}

void invoker_destroy_instance(void** ref,int,int,int,char*,char*){
     #ifdef _WIN32
     __COMPONENT_NAME___fproxy_destroyinstance(ref);
     #else
     __COMPONENT_NAME___fproxy_destroyinstance_(ref);
     #endif
  
}
-- INSERT HERE --

void close(
#ifdef _WIN32
SOCKET
#else
int
#endif
&sockfd,
#ifdef _WIN32
SOCKET
#else
int
#endif
&newsockfd){
#ifdef _WIN32
	 if(newsockfd>=0)
         closesocket(newsockfd);
     if(sockfd>=0)
         closesocket(sockfd);
#else

     if(newsockfd>=0)
         close(newsockfd);
     if(sockfd>=0)
         close(sockfd);
#endif
}

extern "C"{
#ifdef _WIN32
void SOCKET_CLIENT_LOOP(){
#else
void socket_client_loop_(){
#endif
  void* ref=NULL;
#ifdef _WIN32
SOCKET sockfd;
SOCKET newsockfd;
#else
int sockfd=-1,newsockfd=-1;
#endif
  int methodId=0;
  int bufferSize=1024;
  char* hostname;
  char* port_str;
  hostname=getenv("__COMPONENT_NAME_ENV___HOSTNAME");
  
  port_str=getenv("__COMPONENT_NAME_ENV___PORT");
  char *sendBuffer=new char[bufferSize];
  char *rcvBuffer=new char[bufferSize];
  void (*invokers[__CLIENT_METHODS__])(void**,int,int,int,char*,char*);
  invokers[0]=invoker_create_instance;
  invokers[1]=invoker_destroy_instance;
  __SET_CLIENT_INVOKERS__
  open_client(hostname,port_str,sockfd,newsockfd);
  
  
  invokers[0](&ref,sockfd,newsockfd,bufferSize,rcvBuffer,sendBuffer);
  while(methodId!=1){
     readData((char*)&methodId,sizeof(int),rcvBuffer,newsockfd,bufferSize);
     std::cout<<"method_client:"<<methodId<<std::endl;
     invokers[methodId](&ref,sockfd,newsockfd,bufferSize,rcvBuffer,sendBuffer);
     
  }
  close(sockfd,newsockfd);   
  #ifdef _WIN32
  WSACleanup();
  #endif   


  delete [] sendBuffer;
  delete [] rcvBuffer;    
}

#ifdef _WIN32
void SOCKET_SERVER_LOOP(){
#else
void socket_server_loop_(){
#endif
  std::cout<<"starting a server application"<<std::endl;
  void* ref=NULL;
#ifdef _WIN32
SOCKET sockfd;
SOCKET newsockfd;
#else
int sockfd=-1,newsockfd=-1;
#endif
 
  int methodId=0;
  int bufferSize=1024;
  char *sendBuffer=new char[bufferSize];
  char *rcvBuffer=new char[bufferSize];
  char* port_str;
  port_str=getenv("__COMPONENT_NAME_ENV___PORT");
  void (*invokers[__SERVER_METHODS__])(void**,int,int,int,char*,char*);
  invokers[0]=invoker_create_instance;
  invokers[1]=invoker_destroy_instance;
  __SET_SERVER_INVOKERS__
  open_server(port_str,sockfd,newsockfd);
  
  
  invokers[0](&ref,sockfd,newsockfd,bufferSize,rcvBuffer,sendBuffer);
  while(methodId!=1){
     readData((char*)&methodId,sizeof(int),rcvBuffer,newsockfd,bufferSize);
      std::cout<<"method_server:"<<methodId<<std::endl;
     invokers[methodId](&ref,sockfd,newsockfd,bufferSize,rcvBuffer,sendBuffer);
     
  }
  std::cout<<"closing application"<<std::endl;
  close(sockfd,newsockfd);   
  #ifdef _WIN32
  WSACleanup();
  #endif  


  delete [] sendBuffer;
  delete [] rcvBuffer;    
}

}

