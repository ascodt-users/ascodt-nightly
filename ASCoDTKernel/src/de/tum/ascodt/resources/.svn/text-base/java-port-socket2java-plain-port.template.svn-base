//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
__OPEN_PACKAGE__;


public class __PORT_NAME__Socket2JavaPlainPort extends __PORT_NAME__AbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  private long _ref;
  public __PORT_NAME__Socket2JavaPlainPort(String host,int port) {
    super(host,port);
    
  }
  
  public __PORT_NAME__Socket2JavaPlainPort() {
    super();
    
  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    Thread t = new Thread(this);
    t.start();
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance(){
     int methodId=0;
     try{
          sendIntData(methodId);
          _ref=readLongData();
     }catch(java.io.IOException ioe){
     } catch (java.lang.InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     } catch (java.util.concurrent.ExecutionException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     }
  }
  public void destroyInstance(){
     int methodId=1;
     try{
          sendIntData(methodId);
          sendLongData(_ref);
          
     }catch(java.io.IOException ioe){
          
     }     
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(__PORT_NAME__  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void run(){
     int methodId=0;
     try{
     while(methodId!=-1){
          methodId=readIntData();
          __METHODS_SWITCH__
          
     }
     }catch(java.io.IOException ioe){
     } catch (java.lang.InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     } catch (java.util.concurrent.ExecutionException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
     }
     destroyInstance();
     super.close();
  }
-- INSERT HERE --


}
 

__CLOSE_PACKAGE__
