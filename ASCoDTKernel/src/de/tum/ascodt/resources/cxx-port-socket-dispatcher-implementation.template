#include "__PATH_FULL_QUALIFIED_NAME__NativeSocketDispatcher.h"
#include <algorithm>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <assert.h>
#include <algorithm>
#include <iostream>
#include <string.h>
#include <arpa/inet.h>
#include <fcntl.h>

void* __PORT_NAME___dispatch_loop(void *arg){
     ((__FULL_QUALIFIED_NAME__NativeSocketDispatcher*) arg)->dispatch();
}
__FULL_QUALIFIED_NAME__NativeSocketDispatcher::__PORT_NAME__NativeSocketDispatcher(char* host,int port,int bufferSize):
     _buffer_size(bufferSize){
     _rcvBuffer=new char[_buffer_size];
     _sendBuffer=new char[_buffer_size];
     
     __FULL_QUALIFIED_NAME__NativeSocketDispatcher::open(host,port,_sockfd,_newsockfd);
     pthread_create(&_task, NULL,__PORT_NAME___dispatch_loop, this);
}

__FULL_QUALIFIED_NAME__NativeSocketDispatcher::__PORT_NAME__NativeSocketDispatcher(int port,int bufferSize):
      _buffer_size(bufferSize){
     _rcvBuffer=new char[_buffer_size];
     _sendBuffer=new char[_buffer_size];
     __FULL_QUALIFIED_NAME__NativeSocketDispatcher::open(port,_sockfd,_newsockfd);
}
__FULL_QUALIFIED_NAME__NativeSocketDispatcher::~__PORT_NAME__NativeSocketDispatcher(){
     delete [] _rcvBuffer;
     delete [] _sendBuffer;
     __FULL_QUALIFIED_NAME__NativeSocketDispatcher::close(_sockfd,_newsockfd);
     
}


void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::open(char* hostname,int port,int &sockfd,int &newsockfd){
          struct sockaddr_in serv_addr;
          struct hostent *server;

          sockfd = socket(AF_INET, SOCK_STREAM, 0);
          assert(sockfd >= 0);
          server = gethostbyname(hostname);
          assert(server>=0);
          bzero((char *) &serv_addr, sizeof(serv_addr));
          serv_addr.sin_family = AF_INET;
          bcopy((char *)server->h_addr,
                    (char *)&serv_addr.sin_addr.s_addr,
                    server->h_length);
          serv_addr.sin_port = htons(port);
          int tries=60;
                while(tries>0){
               if (::connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) >= 0)
                    break;
                         tries--;
               sleep(1);
                }   
         newsockfd=sockfd;
        
}

void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::open(int port,int &sockfd,int &newsockfd){
          socklen_t clilen;

          struct sockaddr_in serv_addr, cli_addr;

          sockfd = socket(AF_INET, SOCK_STREAM, 0);
          assert (sockfd>=0);

          bzero((char *) &serv_addr, sizeof(serv_addr));
          serv_addr.sin_family = AF_INET;
          serv_addr.sin_addr.s_addr = INADDR_ANY;
          serv_addr.sin_port = htons(port);
          assert (bind(sockfd, (struct sockaddr *) &serv_addr,
                    sizeof(serv_addr)) >= 0);
          listen(sockfd,5);
          clilen = sizeof(cli_addr);
          newsockfd = accept(sockfd,
                    (struct sockaddr *) &cli_addr,
                    &clilen);
          assert (newsockfd >= 0);
}


void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::sendData(char* data, size_t numberOfBytes, char* sendBuffer, int newsockfd,int bufferSize){
     char* data_ptr=(char*)data;
     int remaining_bytes_to_send=0,total_send_bytes=0,send_bytes=0,n=0;

     //clear buffer
     bzero(sendBuffer,bufferSize);
     while(total_send_bytes<numberOfBytes){
          remaining_bytes_to_send=(numberOfBytes-send_bytes<=bufferSize)?numberOfBytes-send_bytes:bufferSize;
          memcpy(sendBuffer,data_ptr,remaining_bytes_to_send);
          send_bytes=0;
          char* send_buffer_ptr=sendBuffer;
          while(send_bytes<bufferSize){
               n = write(newsockfd,send_buffer_ptr,bufferSize-send_bytes);
               if(n>0){
                    send_bytes+=n;
                    send_buffer_ptr+=n;
               }
          }
          total_send_bytes+=send_bytes;
          data_ptr+=send_bytes;
     }

}


void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::readData(char* data,size_t size_of_data,char* readBuffer,int newsockfd, int bufferSize){
          bzero(readBuffer,bufferSize);
          int bytes_received=0;
          int total_bytes_received=0;
          int local_bytes_received=0;
          int bytes_to_copy=0;
          char* data_ptr=data;
          char* buffer_ptr;

          while(total_bytes_received<size_of_data){
               bytes_received=0;
               buffer_ptr=readBuffer;
               while(bytes_received<bufferSize){
                    local_bytes_received = read(newsockfd,buffer_ptr,bufferSize-bytes_received);
                    if(local_bytes_received>0){
                         bytes_received+=local_bytes_received;
                         buffer_ptr+=local_bytes_received;
                    }
               }
               bytes_to_copy=(total_bytes_received+bytes_received>size_of_data)?size_of_data-total_bytes_received:bytes_received;
               memcpy(data_ptr,readBuffer,bytes_to_copy);
               data_ptr+=bytes_to_copy;
               total_bytes_received+=bytes_to_copy;
          }

}


void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::close(int &sockfd,int &newsockfd){
     if(newsockfd>=0)
         ::close(newsockfd);
     if(sockfd>=0)
         ::close(sockfd);
}

void connect___PORT_NAME__(void* ref,__FULL_QUALIFIED_NAME__* port){
    
     ((__FULL_QUALIFIED_NAME__NativeSocketDispatcher*)ref)->connect(port);
}

void disconnect___PORT_NAME__(void* ref,__FULL_QUALIFIED_NAME__* port){
     ((__FULL_QUALIFIED_NAME__NativeSocketDispatcher*)ref)->disconnect(port);
     delete port;
}

void __FULL_QUALIFIED_NAME__NativeSocketDispatcher::dispatch(){
     int methodId=0;
     long long ref;
     void (*invokers[2])(void*,__FULL_QUALIFIED_NAME__*);
     invokers[0]=&connect___PORT_NAME__;
     invokers[1]=&disconnect___PORT_NAME__;
     do{
          readData((char*)&methodId,sizeof(int),_rcvBuffer,_newsockfd,_buffer_size);
          if(methodId!=-1){
               readData((char*)&ref,sizeof(long long),_rcvBuffer,_newsockfd,_buffer_size);
               (*invokers[methodId])(this,(__FULL_QUALIFIED_NAME__*)ref);
          }
     }while(methodId!=-1);
}

