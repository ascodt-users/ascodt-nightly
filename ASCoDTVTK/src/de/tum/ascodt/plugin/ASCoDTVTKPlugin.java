/**
 * 
 */
package de.tum.ascodt.plugin;

import java.io.IOException;
import java.lang.reflect.Method;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import vtk.vtkCanvas;
import vtk.vtkNativeLibrary;

import de.tum.ascodt.plugin.services.VTKService;
import de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice;
import de.tum.ascodt.utils.exceptions.ASCoDTException;

/**
 * 
 * @author Atanas Atanasov
 *
 * Singleton for the vtk plugin instance
 */
public class ASCoDTVTKPlugin extends AbstractUIPlugin {

	public static String ID=ASCoDTVTKPlugin.class.getCanonicalName();
	/**
	 * the plugin singleton
	 */
	private static ASCoDTVTKPlugin _singleton;
	
	/**
	 * service to access vtk functionality
	 */
	private VTKService _vtkService;
	/**
	 * 
	 */
	public ASCoDTVTKPlugin() {
		_singleton=this;
		initializeSwing();
		loadNativeLibraries();
		initialiseServices();
	}
	
	void initializeSwing() {
		/*
		 * Feature in GTK.  The default X error handler
		 * for GTK calls exit() after printing the X error.
		 * Normally, this isn't that big a problem for SWT
		 * applications because they don't cause X errors.
		 * However, sometimes X errors are generated by AWT
		 * that make SWT exit.  The fix is to hide all X
		 * errors when AWT is running.
		 */

		try {
			/* Initialize the default focus traversal policy */
			Class<?>[] emptyClass = new Class[0];
			Object[] emptyObject = new Object[0];
			Class<?> clazz = Class.forName("javax.swing.UIManager");
			Method method = clazz.getMethod("getDefaults", emptyClass);
			if (method != null) method.invoke(clazz, emptyObject);
		} catch (Throwable e) {
			ErrorWriterDevice.getInstance().showError( getClass().getName() , "performFinish()", e);
		}

	}
	
	
	/**
	 * loads all native libraries needed for VTK
	 */
	public void loadNativeLibraries() {
		if(System.getProperty("os.name").contains("Linux")){
			try{
				boolean loaded =vtkNativeLibrary.LoadAllNativeLibraries();
				//if(!loaded)
				//	ErrorWriterDevice.getInstance().showError( getClass().getName() ,
				//			"loadNativeLibraries()",
				//			new ASCoDTException(ASCoDTVTKPlugin.class.getCanonicalName(),"loadNativeLibraries()","VTK libraries not loaeded! Please report the bug to me!",null));
			}catch(Exception e){
				ErrorWriterDevice.getInstance().showError( getClass().getName() , "loadNativeLibraries()", e);
			}
		}else{
			System.loadLibrary("java");
			System.loadLibrary("jvm");
			System.loadLibrary("jawt");
			System.loadLibrary("vtksys");
			System.loadLibrary("mpistubs");
			System.loadLibrary("MapReduceMPI");
			System.loadLibrary("vtkverdict");
			System.loadLibrary("vtkzlib");
			System.loadLibrary("vtkpng");
			System.loadLibrary("vtkjpeg");
			System.loadLibrary("vtktiff");
			System.loadLibrary("vtkexpat");
			System.loadLibrary("vtkfreetype");
			System.loadLibrary("vtkftgl");
			System.loadLibrary("vtklibxml2");
			System.loadLibrary("vtkproj4");
			System.loadLibrary("vtkhdf5");
			System.loadLibrary("vtkNetCDF");
			System.loadLibrary("vtkNetCDF_cxx");
			System.loadLibrary("vtkmetaio");
			System.loadLibrary("vtkCommon");
			System.loadLibrary("vtkCommonJava");
			System.loadLibrary("vtkDICOMParser");
			System.loadLibrary("vtkFiltering");
			System.loadLibrary("vtkFilteringJava");
			System.loadLibrary("vtkGraphics");
			System.loadLibrary("vtkGraphicsJava");
			System.loadLibrary("vtkImaging");
			System.loadLibrary("vtkImagingJava");
			System.loadLibrary("vtkIO");
			System.loadLibrary("vtkIOJava");
			System.loadLibrary("vtkRendering");
			System.loadLibrary("vtkRenderingJava");
			System.loadLibrary("vtkexoIIc");
			System.loadLibrary("vtkHybrid");
			System.loadLibrary("vtkHybridJava");
			System.loadLibrary("vtkWidgets");
			System.loadLibrary("vtkWidgetsJava");
			System.loadLibrary("vtkVolumeRendering");
			System.loadLibrary("vtkVolumeRenderingJava");


		}
	}

	/**
	 * here we setup all services related to vtk 
	 */
	private void initialiseServices() {
		_vtkService=new VTKService();
		
	}

	public static ASCoDTVTKPlugin getDefault(){
		if(_singleton==null)
			return new ASCoDTVTKPlugin();
		return _singleton;
	}
	
	
	/**
	 * Getter for the vtk service
	 * @return the vtk service reference
	 */
	public VTKService getVTKService(){
		return _vtkService;
	}

}
